//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_server_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_server_t*, cef_task_runner_t*> _get_task_runner;
        internal delegate* unmanaged<cef_server_t*, void> _shutdown;
        internal delegate* unmanaged<cef_server_t*, int> _is_running;
        internal delegate* unmanaged<cef_server_t*, cef_string_userfree*> _get_address;
        internal delegate* unmanaged<cef_server_t*, int> _has_connection;
        internal delegate* unmanaged<cef_server_t*, int, int> _is_valid_connection;
        internal delegate* unmanaged<cef_server_t*, int, cef_string_t*, void*, UIntPtr, void> _send_http200response;
        internal delegate* unmanaged<cef_server_t*, int, void> _send_http404response;
        internal delegate* unmanaged<cef_server_t*, int, cef_string_t*, void> _send_http500response;
        internal delegate* unmanaged<cef_server_t*, int, int, cef_string_t*, long, cef_string_multimap*, void> _send_http_response;
        internal delegate* unmanaged<cef_server_t*, int, void*, UIntPtr, void> _send_raw_data;
        internal delegate* unmanaged<cef_server_t*, int, void> _close_connection;
        internal delegate* unmanaged<cef_server_t*, int, void*, UIntPtr, void> _send_web_socket_message;
        
        // CreateServer
        [DllImport(libcef.DllName, EntryPoint = "cef_server_create", CallingConvention = libcef.CEF_CALL)]
        public static extern void create(cef_string_t* address, ushort port, int backlog, cef_server_handler_t* handler);
        
        // AddRef
        
        public static void add_ref(cef_server_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_server_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_server_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_server_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // GetTaskRunner
        
        public static cef_task_runner_t* get_task_runner(cef_server_t* self)
        {
            return self->_get_task_runner(self);
        }
        
        // Shutdown
        
        public static void shutdown(cef_server_t* self)
        {
            self->_shutdown(self);
        }
        
        // IsRunning
        
        public static int is_running(cef_server_t* self)
        {
            return self->_is_running(self);
        }
        
        // GetAddress
        
        public static cef_string_userfree* get_address(cef_server_t* self)
        {
            return self->_get_address(self);
        }
        
        // HasConnection
        
        public static int has_connection(cef_server_t* self)
        {
            return self->_has_connection(self);
        }
        
        // IsValidConnection
        
        public static int is_valid_connection(cef_server_t* self, int connection_id)
        {
            return self->_is_valid_connection(self, connection_id);
        }
        
        // SendHttp200Response
        
        public static void send_http200response(cef_server_t* self, int connection_id, cef_string_t* content_type, void* data, UIntPtr data_size)
        {
            self->_send_http200response(self, connection_id, content_type, data, data_size);
        }
        
        // SendHttp404Response
        
        public static void send_http404response(cef_server_t* self, int connection_id)
        {
            self->_send_http404response(self, connection_id);
        }
        
        // SendHttp500Response
        
        public static void send_http500response(cef_server_t* self, int connection_id, cef_string_t* error_message)
        {
            self->_send_http500response(self, connection_id, error_message);
        }
        
        // SendHttpResponse
        
        public static void send_http_response(cef_server_t* self, int connection_id, int response_code, cef_string_t* content_type, long content_length, cef_string_multimap* extra_headers)
        {
            self->_send_http_response(self, connection_id, response_code, content_type, content_length, extra_headers);
        }
        
        // SendRawData
        
        public static void send_raw_data(cef_server_t* self, int connection_id, void* data, UIntPtr data_size)
        {
            self->_send_raw_data(self, connection_id, data, data_size);
        }
        
        // CloseConnection
        
        public static void close_connection(cef_server_t* self, int connection_id)
        {
            self->_close_connection(self, connection_id);
        }
        
        // SendWebSocketMessage
        
        public static void send_web_socket_message(cef_server_t* self, int connection_id, void* data, UIntPtr data_size)
        {
            self->_send_web_socket_message(self, connection_id, data, data_size);
        }
        
    }
}
