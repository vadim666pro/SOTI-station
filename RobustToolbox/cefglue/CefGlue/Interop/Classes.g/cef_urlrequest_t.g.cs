//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_urlrequest_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_urlrequest_t*, cef_request_t*> _get_request;
        internal delegate* unmanaged<cef_urlrequest_t*, cef_urlrequest_client_t*> _get_client;
        internal delegate* unmanaged<cef_urlrequest_t*, CefUrlRequestStatus> _get_request_status;
        internal delegate* unmanaged<cef_urlrequest_t*, CefErrorCode> _get_request_error;
        internal delegate* unmanaged<cef_urlrequest_t*, cef_response_t*> _get_response;
        internal delegate* unmanaged<cef_urlrequest_t*, int> _response_was_cached;
        internal delegate* unmanaged<cef_urlrequest_t*, void> _cancel;
        
        // Create
        [DllImport(libcef.DllName, EntryPoint = "cef_urlrequest_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_urlrequest_t* create(cef_request_t* request, cef_urlrequest_client_t* client, cef_request_context_t* request_context);
        
        // AddRef
        
        public static void add_ref(cef_urlrequest_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_urlrequest_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_urlrequest_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_urlrequest_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // GetRequest
        
        public static cef_request_t* get_request(cef_urlrequest_t* self)
        {
            return self->_get_request(self);
        }
        
        // GetClient
        
        public static cef_urlrequest_client_t* get_client(cef_urlrequest_t* self)
        {
            return self->_get_client(self);
        }
        
        // GetRequestStatus
        
        public static CefUrlRequestStatus get_request_status(cef_urlrequest_t* self)
        {
            return self->_get_request_status(self);
        }
        
        // GetRequestError
        
        public static CefErrorCode get_request_error(cef_urlrequest_t* self)
        {
            return self->_get_request_error(self);
        }
        
        // GetResponse
        
        public static cef_response_t* get_response(cef_urlrequest_t* self)
        {
            return self->_get_response(self);
        }
        
        // ResponseWasCached
        
        public static int response_was_cached(cef_urlrequest_t* self)
        {
            return self->_response_was_cached(self);
        }
        
        // Cancel
        
        public static void cancel(cef_urlrequest_t* self)
        {
            self->_cancel(self);
        }
        
    }
}
