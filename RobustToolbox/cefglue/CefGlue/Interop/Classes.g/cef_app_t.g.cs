//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_app_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_app_t*, cef_string_t*, cef_command_line_t*, void> _on_before_command_line_processing;
        internal delegate* unmanaged<cef_app_t*, cef_scheme_registrar_t*, void> _on_register_custom_schemes;
        internal delegate* unmanaged<cef_app_t*, cef_resource_bundle_handler_t*> _get_resource_bundle_handler;
        internal delegate* unmanaged<cef_app_t*, cef_browser_process_handler_t*> _get_browser_process_handler;
        internal delegate* unmanaged<cef_app_t*, cef_render_process_handler_t*> _get_render_process_handler;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_before_command_line_processing(cef_app_t* self, cef_string_t* process_type, cef_command_line_t* command_line)
        {
            var obj = (CefApp)self->_obj.Target;
            obj.on_before_command_line_processing(self, process_type, command_line);
        }
        
        [UnmanagedCallersOnly]
        public static void on_register_custom_schemes(cef_app_t* self, cef_scheme_registrar_t* registrar)
        {
            var obj = (CefApp)self->_obj.Target;
            obj.on_register_custom_schemes(self, registrar);
        }
        
        [UnmanagedCallersOnly]
        public static cef_resource_bundle_handler_t* get_resource_bundle_handler(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            return obj.get_resource_bundle_handler(self);
        }
        
        [UnmanagedCallersOnly]
        public static cef_browser_process_handler_t* get_browser_process_handler(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            return obj.get_browser_process_handler(self);
        }
        
        [UnmanagedCallersOnly]
        public static cef_render_process_handler_t* get_render_process_handler(cef_app_t* self)
        {
            var obj = (CefApp)self->_obj.Target;
            return obj.get_render_process_handler(self);
        }
        
        internal static cef_app_t* Alloc()
        {
            var ptr = (cef_app_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_app_t));
            *ptr = default(cef_app_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_app_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_app_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_app_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_app_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_app_t*, int>)&has_at_least_one_ref;
            ptr->_on_before_command_line_processing = &on_before_command_line_processing;
            ptr->_on_register_custom_schemes = &on_register_custom_schemes;
            ptr->_get_resource_bundle_handler = &get_resource_bundle_handler;
            ptr->_get_browser_process_handler = &get_browser_process_handler;
            ptr->_get_render_process_handler = &get_render_process_handler;
            return ptr;
        }
        
        internal static void Free(cef_app_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
