//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_menu_model_delegate_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, int, CefEventFlags, void> _execute_command;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, cef_point_t*, void> _mouse_outside_menu;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, int, void> _unhandled_open_submenu;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, int, void> _unhandled_close_submenu;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, void> _menu_will_show;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, void> _menu_closed;
        internal delegate* unmanaged<cef_menu_model_delegate_t*, cef_menu_model_t*, cef_string_t*, int> _format_label;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_menu_model_delegate_t* self)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_menu_model_delegate_t* self)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_menu_model_delegate_t* self)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_menu_model_delegate_t* self)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void execute_command(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model, int command_id, CefEventFlags event_flags)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.execute_command(self, menu_model, command_id, event_flags);
        }
        
        [UnmanagedCallersOnly]
        public static void mouse_outside_menu(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model, cef_point_t* screen_point)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.mouse_outside_menu(self, menu_model, screen_point);
        }
        
        [UnmanagedCallersOnly]
        public static void unhandled_open_submenu(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model, int is_rtl)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.unhandled_open_submenu(self, menu_model, is_rtl);
        }
        
        [UnmanagedCallersOnly]
        public static void unhandled_close_submenu(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model, int is_rtl)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.unhandled_close_submenu(self, menu_model, is_rtl);
        }
        
        [UnmanagedCallersOnly]
        public static void menu_will_show(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.menu_will_show(self, menu_model);
        }
        
        [UnmanagedCallersOnly]
        public static void menu_closed(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            obj.menu_closed(self, menu_model);
        }
        
        [UnmanagedCallersOnly]
        public static int format_label(cef_menu_model_delegate_t* self, cef_menu_model_t* menu_model, cef_string_t* label)
        {
            var obj = (CefMenuModelDelegate)self->_obj.Target;
            return obj.format_label(self, menu_model, label);
        }
        
        internal static cef_menu_model_delegate_t* Alloc()
        {
            var ptr = (cef_menu_model_delegate_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_menu_model_delegate_t));
            *ptr = default(cef_menu_model_delegate_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_menu_model_delegate_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_menu_model_delegate_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_menu_model_delegate_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_menu_model_delegate_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_menu_model_delegate_t*, int>)&has_at_least_one_ref;
            ptr->_execute_command = &execute_command;
            ptr->_mouse_outside_menu = &mouse_outside_menu;
            ptr->_unhandled_open_submenu = &unhandled_open_submenu;
            ptr->_unhandled_close_submenu = &unhandled_close_submenu;
            ptr->_menu_will_show = &menu_will_show;
            ptr->_menu_closed = &menu_closed;
            ptr->_format_label = &format_label;
            return ptr;
        }
        
        internal static void Free(cef_menu_model_delegate_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
