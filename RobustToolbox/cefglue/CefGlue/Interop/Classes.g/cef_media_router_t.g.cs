//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_media_router_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_media_router_t*, cef_media_observer_t*, cef_registration_t*> _add_observer;
        internal delegate* unmanaged<cef_media_router_t*, cef_string_t*, cef_media_source_t*> _get_source;
        internal delegate* unmanaged<cef_media_router_t*, void> _notify_current_sinks;
        internal delegate* unmanaged<cef_media_router_t*, cef_media_source_t*, cef_media_sink_t*, cef_media_route_create_callback_t*, void> _create_route;
        internal delegate* unmanaged<cef_media_router_t*, void> _notify_current_routes;
        
        // GetGlobalMediaRouter
        [DllImport(libcef.DllName, EntryPoint = "cef_media_router_get_global", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_media_router_t* get_global(cef_completion_callback_t* callback);
        
        // AddRef
        
        public static void add_ref(cef_media_router_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_media_router_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_media_router_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_media_router_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // AddObserver
        
        public static cef_registration_t* add_observer(cef_media_router_t* self, cef_media_observer_t* observer)
        {
            return self->_add_observer(self, observer);
        }
        
        // GetSource
        
        public static cef_media_source_t* get_source(cef_media_router_t* self, cef_string_t* urn)
        {
            return self->_get_source(self, urn);
        }
        
        // NotifyCurrentSinks
        
        public static void notify_current_sinks(cef_media_router_t* self)
        {
            self->_notify_current_sinks(self);
        }
        
        // CreateRoute
        
        public static void create_route(cef_media_router_t* self, cef_media_source_t* source, cef_media_sink_t* sink, cef_media_route_create_callback_t* callback)
        {
            self->_create_route(self, source, sink, callback);
        }
        
        // NotifyCurrentRoutes
        
        public static void notify_current_routes(cef_media_router_t* self)
        {
            self->_notify_current_routes(self);
        }
        
    }
}
