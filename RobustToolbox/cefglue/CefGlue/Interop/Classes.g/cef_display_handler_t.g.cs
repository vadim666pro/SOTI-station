//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_display_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, void> _on_address_change;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, cef_string_t*, void> _on_title_change;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, cef_string_list*, void> _on_favicon_urlchange;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, int, void> _on_fullscreen_mode_change;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, cef_string_t*, int> _on_tooltip;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, cef_string_t*, void> _on_status_message;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, CefLogSeverity, cef_string_t*, cef_string_t*, int, int> _on_console_message;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, cef_size_t*, int> _on_auto_resize;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, double, void> _on_loading_progress_change;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, IntPtr, CefCursorType, cef_cursor_info_t*, int> _on_cursor_change;
        internal delegate* unmanaged<cef_display_handler_t*, cef_browser_t*, int, int, void> _on_media_access_change;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_display_handler_t* self)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_display_handler_t* self)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_display_handler_t* self)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_display_handler_t* self)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_address_change(cef_display_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* url)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_address_change(self, browser, frame, url);
        }
        
        [UnmanagedCallersOnly]
        public static void on_title_change(cef_display_handler_t* self, cef_browser_t* browser, cef_string_t* title)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_title_change(self, browser, title);
        }
        
        [UnmanagedCallersOnly]
        public static void on_favicon_urlchange(cef_display_handler_t* self, cef_browser_t* browser, cef_string_list* icon_urls)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_favicon_urlchange(self, browser, icon_urls);
        }
        
        [UnmanagedCallersOnly]
        public static void on_fullscreen_mode_change(cef_display_handler_t* self, cef_browser_t* browser, int fullscreen)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_fullscreen_mode_change(self, browser, fullscreen);
        }
        
        [UnmanagedCallersOnly]
        public static int on_tooltip(cef_display_handler_t* self, cef_browser_t* browser, cef_string_t* text)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.on_tooltip(self, browser, text);
        }
        
        [UnmanagedCallersOnly]
        public static void on_status_message(cef_display_handler_t* self, cef_browser_t* browser, cef_string_t* value)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_status_message(self, browser, value);
        }
        
        [UnmanagedCallersOnly]
        public static int on_console_message(cef_display_handler_t* self, cef_browser_t* browser, CefLogSeverity level, cef_string_t* message, cef_string_t* source, int line)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.on_console_message(self, browser, level, message, source, line);
        }
        
        [UnmanagedCallersOnly]
        public static int on_auto_resize(cef_display_handler_t* self, cef_browser_t* browser, cef_size_t* new_size)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.on_auto_resize(self, browser, new_size);
        }
        
        [UnmanagedCallersOnly]
        public static void on_loading_progress_change(cef_display_handler_t* self, cef_browser_t* browser, double progress)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_loading_progress_change(self, browser, progress);
        }
        
        [UnmanagedCallersOnly]
        public static int on_cursor_change(cef_display_handler_t* self, cef_browser_t* browser, IntPtr cursor, CefCursorType type, cef_cursor_info_t* custom_cursor_info)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            return obj.on_cursor_change(self, browser, cursor, type, custom_cursor_info);
        }
        
        [UnmanagedCallersOnly]
        public static void on_media_access_change(cef_display_handler_t* self, cef_browser_t* browser, int has_video_access, int has_audio_access)
        {
            var obj = (CefDisplayHandler)self->_obj.Target;
            obj.on_media_access_change(self, browser, has_video_access, has_audio_access);
        }
        
        internal static cef_display_handler_t* Alloc()
        {
            var ptr = (cef_display_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_display_handler_t));
            *ptr = default(cef_display_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_display_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_display_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_display_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_display_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_display_handler_t*, int>)&has_at_least_one_ref;
            ptr->_on_address_change = &on_address_change;
            ptr->_on_title_change = &on_title_change;
            ptr->_on_favicon_urlchange = &on_favicon_urlchange;
            ptr->_on_fullscreen_mode_change = &on_fullscreen_mode_change;
            ptr->_on_tooltip = &on_tooltip;
            ptr->_on_status_message = &on_status_message;
            ptr->_on_console_message = &on_console_message;
            ptr->_on_auto_resize = &on_auto_resize;
            ptr->_on_loading_progress_change = &on_loading_progress_change;
            ptr->_on_cursor_change = &on_cursor_change;
            ptr->_on_media_access_change = &on_media_access_change;
            return ptr;
        }
        
        internal static void Free(cef_display_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
