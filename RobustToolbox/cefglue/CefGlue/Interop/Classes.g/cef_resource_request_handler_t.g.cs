//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_resource_request_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_cookie_access_filter_t*> _get_cookie_access_filter;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_callback_t*, CefReturnValue> _on_before_resource_load;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_resource_handler_t*> _get_resource_handler;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_response_t*, cef_string_t*, void> _on_resource_redirect;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_response_t*, int> _on_resource_response;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_response_t*, cef_response_filter_t*> _get_resource_response_filter;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_response_t*, CefUrlRequestStatus, long, void> _on_resource_load_complete;
        internal delegate* unmanaged<cef_resource_request_handler_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, int*, void> _on_protocol_execution;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_resource_request_handler_t* self)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_resource_request_handler_t* self)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_resource_request_handler_t* self)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_resource_request_handler_t* self)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static cef_cookie_access_filter_t* get_cookie_access_filter(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.get_cookie_access_filter(self, browser, frame, request);
        }
        
        [UnmanagedCallersOnly]
        public static CefReturnValue on_before_resource_load(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_callback_t* callback)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.on_before_resource_load(self, browser, frame, request, callback);
        }
        
        [UnmanagedCallersOnly]
        public static cef_resource_handler_t* get_resource_handler(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.get_resource_handler(self, browser, frame, request);
        }
        
        [UnmanagedCallersOnly]
        public static void on_resource_redirect(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_response_t* response, cef_string_t* new_url)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            obj.on_resource_redirect(self, browser, frame, request, response, new_url);
        }
        
        [UnmanagedCallersOnly]
        public static int on_resource_response(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_response_t* response)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.on_resource_response(self, browser, frame, request, response);
        }
        
        [UnmanagedCallersOnly]
        public static cef_response_filter_t* get_resource_response_filter(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_response_t* response)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            return obj.get_resource_response_filter(self, browser, frame, request, response);
        }
        
        [UnmanagedCallersOnly]
        public static void on_resource_load_complete(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_response_t* response, CefUrlRequestStatus status, long received_content_length)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            obj.on_resource_load_complete(self, browser, frame, request, response, status, received_content_length);
        }
        
        [UnmanagedCallersOnly]
        public static void on_protocol_execution(cef_resource_request_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, int* allow_os_execution)
        {
            var obj = (CefResourceRequestHandler)self->_obj.Target;
            obj.on_protocol_execution(self, browser, frame, request, allow_os_execution);
        }
        
        internal static cef_resource_request_handler_t* Alloc()
        {
            var ptr = (cef_resource_request_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_resource_request_handler_t));
            *ptr = default(cef_resource_request_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_resource_request_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_resource_request_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_resource_request_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_resource_request_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_resource_request_handler_t*, int>)&has_at_least_one_ref;
            ptr->_get_cookie_access_filter = &get_cookie_access_filter;
            ptr->_on_before_resource_load = &on_before_resource_load;
            ptr->_get_resource_handler = &get_resource_handler;
            ptr->_on_resource_redirect = &on_resource_redirect;
            ptr->_on_resource_response = &on_resource_response;
            ptr->_get_resource_response_filter = &get_resource_response_filter;
            ptr->_on_resource_load_complete = &on_resource_load_complete;
            ptr->_on_protocol_execution = &on_protocol_execution;
            return ptr;
        }
        
        internal static void Free(cef_resource_request_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
