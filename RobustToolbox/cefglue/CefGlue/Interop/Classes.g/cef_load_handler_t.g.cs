//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_load_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_load_handler_t*, cef_browser_t*, int, int, int, void> _on_loading_state_change;
        internal delegate* unmanaged<cef_load_handler_t*, cef_browser_t*, cef_frame_t*, CefTransitionType, void> _on_load_start;
        internal delegate* unmanaged<cef_load_handler_t*, cef_browser_t*, cef_frame_t*, int, void> _on_load_end;
        internal delegate* unmanaged<cef_load_handler_t*, cef_browser_t*, cef_frame_t*, CefErrorCode, cef_string_t*, cef_string_t*, void> _on_load_error;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_load_handler_t* self)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_load_handler_t* self)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_load_handler_t* self)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_load_handler_t* self)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_loading_state_change(cef_load_handler_t* self, cef_browser_t* browser, int isLoading, int canGoBack, int canGoForward)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            obj.on_loading_state_change(self, browser, isLoading, canGoBack, canGoForward);
        }
        
        [UnmanagedCallersOnly]
        public static void on_load_start(cef_load_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, CefTransitionType transition_type)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            obj.on_load_start(self, browser, frame, transition_type);
        }
        
        [UnmanagedCallersOnly]
        public static void on_load_end(cef_load_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, int httpStatusCode)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            obj.on_load_end(self, browser, frame, httpStatusCode);
        }
        
        [UnmanagedCallersOnly]
        public static void on_load_error(cef_load_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, CefErrorCode errorCode, cef_string_t* errorText, cef_string_t* failedUrl)
        {
            var obj = (CefLoadHandler)self->_obj.Target;
            obj.on_load_error(self, browser, frame, errorCode, errorText, failedUrl);
        }
        
        internal static cef_load_handler_t* Alloc()
        {
            var ptr = (cef_load_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_load_handler_t));
            *ptr = default(cef_load_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_load_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_load_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_load_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_load_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_load_handler_t*, int>)&has_at_least_one_ref;
            ptr->_on_loading_state_change = &on_loading_state_change;
            ptr->_on_load_start = &on_load_start;
            ptr->_on_load_end = &on_load_end;
            ptr->_on_load_error = &on_load_error;
            return ptr;
        }
        
        internal static void Free(cef_load_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
