//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_urlrequest_client_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_urlrequest_client_t*, cef_urlrequest_t*, void> _on_request_complete;
        internal delegate* unmanaged<cef_urlrequest_client_t*, cef_urlrequest_t*, long, long, void> _on_upload_progress;
        internal delegate* unmanaged<cef_urlrequest_client_t*, cef_urlrequest_t*, long, long, void> _on_download_progress;
        internal delegate* unmanaged<cef_urlrequest_client_t*, cef_urlrequest_t*, void*, UIntPtr, void> _on_download_data;
        internal delegate* unmanaged<cef_urlrequest_client_t*, int, cef_string_t*, int, cef_string_t*, cef_string_t*, cef_auth_callback_t*, int> _get_auth_credentials;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_urlrequest_client_t* self)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_urlrequest_client_t* self)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_urlrequest_client_t* self)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_urlrequest_client_t* self)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_request_complete(cef_urlrequest_client_t* self, cef_urlrequest_t* request)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            obj.on_request_complete(self, request);
        }
        
        [UnmanagedCallersOnly]
        public static void on_upload_progress(cef_urlrequest_client_t* self, cef_urlrequest_t* request, long current, long total)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            obj.on_upload_progress(self, request, current, total);
        }
        
        [UnmanagedCallersOnly]
        public static void on_download_progress(cef_urlrequest_client_t* self, cef_urlrequest_t* request, long current, long total)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            obj.on_download_progress(self, request, current, total);
        }
        
        [UnmanagedCallersOnly]
        public static void on_download_data(cef_urlrequest_client_t* self, cef_urlrequest_t* request, void* data, UIntPtr data_length)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            obj.on_download_data(self, request, data, data_length);
        }
        
        [UnmanagedCallersOnly]
        public static int get_auth_credentials(cef_urlrequest_client_t* self, int isProxy, cef_string_t* host, int port, cef_string_t* realm, cef_string_t* scheme, cef_auth_callback_t* callback)
        {
            var obj = (CefUrlRequestClient)self->_obj.Target;
            return obj.get_auth_credentials(self, isProxy, host, port, realm, scheme, callback);
        }
        
        internal static cef_urlrequest_client_t* Alloc()
        {
            var ptr = (cef_urlrequest_client_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_urlrequest_client_t));
            *ptr = default(cef_urlrequest_client_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_urlrequest_client_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_urlrequest_client_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_urlrequest_client_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_urlrequest_client_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_urlrequest_client_t*, int>)&has_at_least_one_ref;
            ptr->_on_request_complete = &on_request_complete;
            ptr->_on_upload_progress = &on_upload_progress;
            ptr->_on_download_progress = &on_download_progress;
            ptr->_on_download_data = &on_download_data;
            ptr->_get_auth_credentials = &get_auth_credentials;
            return ptr;
        }
        
        internal static void Free(cef_urlrequest_client_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
