//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_cookie_access_filter_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_cookie_access_filter_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_cookie_t*, int> _can_send_cookie;
        internal delegate* unmanaged<cef_cookie_access_filter_t*, cef_browser_t*, cef_frame_t*, cef_request_t*, cef_response_t*, cef_cookie_t*, int> _can_save_cookie;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_cookie_access_filter_t* self)
        {
            var obj = (CefCookieAccessFilter)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_cookie_access_filter_t* self)
        {
            var obj = (CefCookieAccessFilter)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_cookie_access_filter_t* self)
        {
            var obj = (CefCookieAccessFilter)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_cookie_access_filter_t* self)
        {
            var obj = (CefCookieAccessFilter)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int can_send_cookie(cef_cookie_access_filter_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_cookie_t* cookie)
        {
            var obj = (CefCookieAccessFilter)self->_obj.Target;
            return obj.can_send_cookie(self, browser, frame, request, cookie);
        }
        
        [UnmanagedCallersOnly]
        public static int can_save_cookie(cef_cookie_access_filter_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_request_t* request, cef_response_t* response, cef_cookie_t* cookie)
        {
            var obj = (CefCookieAccessFilter)self->_obj.Target;
            return obj.can_save_cookie(self, browser, frame, request, response, cookie);
        }
        
        internal static cef_cookie_access_filter_t* Alloc()
        {
            var ptr = (cef_cookie_access_filter_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_cookie_access_filter_t));
            *ptr = default(cef_cookie_access_filter_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_cookie_access_filter_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_cookie_access_filter_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_cookie_access_filter_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_cookie_access_filter_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_cookie_access_filter_t*, int>)&has_at_least_one_ref;
            ptr->_can_send_cookie = &can_send_cookie;
            ptr->_can_save_cookie = &can_save_cookie;
            return ptr;
        }
        
        internal static void Free(cef_cookie_access_filter_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
