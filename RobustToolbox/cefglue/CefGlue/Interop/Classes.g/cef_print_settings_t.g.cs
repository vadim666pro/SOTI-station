//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_print_settings_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_print_settings_t*, int> _is_valid;
        internal delegate* unmanaged<cef_print_settings_t*, int> _is_read_only;
        internal delegate* unmanaged<cef_print_settings_t*, int, void> _set_orientation;
        internal delegate* unmanaged<cef_print_settings_t*, int> _is_landscape;
        internal delegate* unmanaged<cef_print_settings_t*, cef_size_t*, cef_rect_t*, int, void> _set_printer_printable_area;
        internal delegate* unmanaged<cef_print_settings_t*, cef_string_t*, void> _set_device_name;
        internal delegate* unmanaged<cef_print_settings_t*, cef_string_userfree*> _get_device_name;
        internal delegate* unmanaged<cef_print_settings_t*, int, void> _set_dpi;
        internal delegate* unmanaged<cef_print_settings_t*, int> _get_dpi;
        internal delegate* unmanaged<cef_print_settings_t*, UIntPtr, cef_range_t*, void> _set_page_ranges;
        internal delegate* unmanaged<cef_print_settings_t*, UIntPtr> _get_page_ranges_count;
        internal delegate* unmanaged<cef_print_settings_t*, UIntPtr*, cef_range_t*, void> _get_page_ranges;
        internal delegate* unmanaged<cef_print_settings_t*, int, void> _set_selection_only;
        internal delegate* unmanaged<cef_print_settings_t*, int> _is_selection_only;
        internal delegate* unmanaged<cef_print_settings_t*, int, void> _set_collate;
        internal delegate* unmanaged<cef_print_settings_t*, int> _will_collate;
        internal delegate* unmanaged<cef_print_settings_t*, CefColorModel, void> _set_color_model;
        internal delegate* unmanaged<cef_print_settings_t*, CefColorModel> _get_color_model;
        internal delegate* unmanaged<cef_print_settings_t*, int, void> _set_copies;
        internal delegate* unmanaged<cef_print_settings_t*, int> _get_copies;
        internal delegate* unmanaged<cef_print_settings_t*, CefDuplexMode, void> _set_duplex_mode;
        internal delegate* unmanaged<cef_print_settings_t*, CefDuplexMode> _get_duplex_mode;
        
        // Create
        [DllImport(libcef.DllName, EntryPoint = "cef_print_settings_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_print_settings_t* create();
        
        // AddRef
        
        public static void add_ref(cef_print_settings_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_print_settings_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_print_settings_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_print_settings_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsValid
        
        public static int is_valid(cef_print_settings_t* self)
        {
            return self->_is_valid(self);
        }
        
        // IsReadOnly
        
        public static int is_read_only(cef_print_settings_t* self)
        {
            return self->_is_read_only(self);
        }
        
        // SetOrientation
        
        public static void set_orientation(cef_print_settings_t* self, int landscape)
        {
            self->_set_orientation(self, landscape);
        }
        
        // IsLandscape
        
        public static int is_landscape(cef_print_settings_t* self)
        {
            return self->_is_landscape(self);
        }
        
        // SetPrinterPrintableArea
        
        public static void set_printer_printable_area(cef_print_settings_t* self, cef_size_t* physical_size_device_units, cef_rect_t* printable_area_device_units, int landscape_needs_flip)
        {
            self->_set_printer_printable_area(self, physical_size_device_units, printable_area_device_units, landscape_needs_flip);
        }
        
        // SetDeviceName
        
        public static void set_device_name(cef_print_settings_t* self, cef_string_t* name)
        {
            self->_set_device_name(self, name);
        }
        
        // GetDeviceName
        
        public static cef_string_userfree* get_device_name(cef_print_settings_t* self)
        {
            return self->_get_device_name(self);
        }
        
        // SetDPI
        
        public static void set_dpi(cef_print_settings_t* self, int dpi)
        {
            self->_set_dpi(self, dpi);
        }
        
        // GetDPI
        
        public static int get_dpi(cef_print_settings_t* self)
        {
            return self->_get_dpi(self);
        }
        
        // SetPageRanges
        
        public static void set_page_ranges(cef_print_settings_t* self, UIntPtr rangesCount, cef_range_t* ranges)
        {
            self->_set_page_ranges(self, rangesCount, ranges);
        }
        
        // GetPageRangesCount
        
        public static UIntPtr get_page_ranges_count(cef_print_settings_t* self)
        {
            return self->_get_page_ranges_count(self);
        }
        
        // GetPageRanges
        
        public static void get_page_ranges(cef_print_settings_t* self, UIntPtr* rangesCount, cef_range_t* ranges)
        {
            self->_get_page_ranges(self, rangesCount, ranges);
        }
        
        // SetSelectionOnly
        
        public static void set_selection_only(cef_print_settings_t* self, int selection_only)
        {
            self->_set_selection_only(self, selection_only);
        }
        
        // IsSelectionOnly
        
        public static int is_selection_only(cef_print_settings_t* self)
        {
            return self->_is_selection_only(self);
        }
        
        // SetCollate
        
        public static void set_collate(cef_print_settings_t* self, int collate)
        {
            self->_set_collate(self, collate);
        }
        
        // WillCollate
        
        public static int will_collate(cef_print_settings_t* self)
        {
            return self->_will_collate(self);
        }
        
        // SetColorModel
        
        public static void set_color_model(cef_print_settings_t* self, CefColorModel model)
        {
            self->_set_color_model(self, model);
        }
        
        // GetColorModel
        
        public static CefColorModel get_color_model(cef_print_settings_t* self)
        {
            return self->_get_color_model(self);
        }
        
        // SetCopies
        
        public static void set_copies(cef_print_settings_t* self, int copies)
        {
            self->_set_copies(self, copies);
        }
        
        // GetCopies
        
        public static int get_copies(cef_print_settings_t* self)
        {
            return self->_get_copies(self);
        }
        
        // SetDuplexMode
        
        public static void set_duplex_mode(cef_print_settings_t* self, CefDuplexMode mode)
        {
            self->_set_duplex_mode(self, mode);
        }
        
        // GetDuplexMode
        
        public static CefDuplexMode get_duplex_mode(cef_print_settings_t* self)
        {
            return self->_get_duplex_mode(self);
        }
        
    }
}
