//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_drag_data_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_drag_data_t*, cef_drag_data_t*> _clone;
        internal delegate* unmanaged<cef_drag_data_t*, int> _is_read_only;
        internal delegate* unmanaged<cef_drag_data_t*, int> _is_link;
        internal delegate* unmanaged<cef_drag_data_t*, int> _is_fragment;
        internal delegate* unmanaged<cef_drag_data_t*, int> _is_file;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_link_url;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_link_title;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_link_metadata;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_fragment_text;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_fragment_html;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_fragment_base_url;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_userfree*> _get_file_name;
        internal delegate* unmanaged<cef_drag_data_t*, cef_stream_writer_t*, UIntPtr> _get_file_contents;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_list*, int> _get_file_names;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_list*, int> _get_file_paths;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, void> _set_link_url;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, void> _set_link_title;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, void> _set_link_metadata;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, void> _set_fragment_text;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, void> _set_fragment_html;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, void> _set_fragment_base_url;
        internal delegate* unmanaged<cef_drag_data_t*, void> _reset_file_contents;
        internal delegate* unmanaged<cef_drag_data_t*, cef_string_t*, cef_string_t*, void> _add_file;
        internal delegate* unmanaged<cef_drag_data_t*, void> _clear_filenames;
        internal delegate* unmanaged<cef_drag_data_t*, cef_image_t*> _get_image;
        internal delegate* unmanaged<cef_drag_data_t*, cef_point_t> _get_image_hotspot;
        internal delegate* unmanaged<cef_drag_data_t*, int> _has_image;
        
        // Create
        [DllImport(libcef.DllName, EntryPoint = "cef_drag_data_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_drag_data_t* create();
        
        // AddRef
        
        public static void add_ref(cef_drag_data_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_drag_data_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_drag_data_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_drag_data_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // Clone
        
        public static cef_drag_data_t* clone(cef_drag_data_t* self)
        {
            return self->_clone(self);
        }
        
        // IsReadOnly
        
        public static int is_read_only(cef_drag_data_t* self)
        {
            return self->_is_read_only(self);
        }
        
        // IsLink
        
        public static int is_link(cef_drag_data_t* self)
        {
            return self->_is_link(self);
        }
        
        // IsFragment
        
        public static int is_fragment(cef_drag_data_t* self)
        {
            return self->_is_fragment(self);
        }
        
        // IsFile
        
        public static int is_file(cef_drag_data_t* self)
        {
            return self->_is_file(self);
        }
        
        // GetLinkURL
        
        public static cef_string_userfree* get_link_url(cef_drag_data_t* self)
        {
            return self->_get_link_url(self);
        }
        
        // GetLinkTitle
        
        public static cef_string_userfree* get_link_title(cef_drag_data_t* self)
        {
            return self->_get_link_title(self);
        }
        
        // GetLinkMetadata
        
        public static cef_string_userfree* get_link_metadata(cef_drag_data_t* self)
        {
            return self->_get_link_metadata(self);
        }
        
        // GetFragmentText
        
        public static cef_string_userfree* get_fragment_text(cef_drag_data_t* self)
        {
            return self->_get_fragment_text(self);
        }
        
        // GetFragmentHtml
        
        public static cef_string_userfree* get_fragment_html(cef_drag_data_t* self)
        {
            return self->_get_fragment_html(self);
        }
        
        // GetFragmentBaseURL
        
        public static cef_string_userfree* get_fragment_base_url(cef_drag_data_t* self)
        {
            return self->_get_fragment_base_url(self);
        }
        
        // GetFileName
        
        public static cef_string_userfree* get_file_name(cef_drag_data_t* self)
        {
            return self->_get_file_name(self);
        }
        
        // GetFileContents
        
        public static UIntPtr get_file_contents(cef_drag_data_t* self, cef_stream_writer_t* writer)
        {
            return self->_get_file_contents(self, writer);
        }
        
        // GetFileNames
        
        public static int get_file_names(cef_drag_data_t* self, cef_string_list* names)
        {
            return self->_get_file_names(self, names);
        }
        
        // GetFilePaths
        
        public static int get_file_paths(cef_drag_data_t* self, cef_string_list* paths)
        {
            return self->_get_file_paths(self, paths);
        }
        
        // SetLinkURL
        
        public static void set_link_url(cef_drag_data_t* self, cef_string_t* url)
        {
            self->_set_link_url(self, url);
        }
        
        // SetLinkTitle
        
        public static void set_link_title(cef_drag_data_t* self, cef_string_t* title)
        {
            self->_set_link_title(self, title);
        }
        
        // SetLinkMetadata
        
        public static void set_link_metadata(cef_drag_data_t* self, cef_string_t* data)
        {
            self->_set_link_metadata(self, data);
        }
        
        // SetFragmentText
        
        public static void set_fragment_text(cef_drag_data_t* self, cef_string_t* text)
        {
            self->_set_fragment_text(self, text);
        }
        
        // SetFragmentHtml
        
        public static void set_fragment_html(cef_drag_data_t* self, cef_string_t* html)
        {
            self->_set_fragment_html(self, html);
        }
        
        // SetFragmentBaseURL
        
        public static void set_fragment_base_url(cef_drag_data_t* self, cef_string_t* base_url)
        {
            self->_set_fragment_base_url(self, base_url);
        }
        
        // ResetFileContents
        
        public static void reset_file_contents(cef_drag_data_t* self)
        {
            self->_reset_file_contents(self);
        }
        
        // AddFile
        
        public static void add_file(cef_drag_data_t* self, cef_string_t* path, cef_string_t* display_name)
        {
            self->_add_file(self, path, display_name);
        }
        
        // ClearFilenames
        
        public static void clear_filenames(cef_drag_data_t* self)
        {
            self->_clear_filenames(self);
        }
        
        // GetImage
        
        public static cef_image_t* get_image(cef_drag_data_t* self)
        {
            return self->_get_image(self);
        }
        
        // GetImageHotspot
        
        public static cef_point_t get_image_hotspot(cef_drag_data_t* self)
        {
            return self->_get_image_hotspot(self);
        }
        
        // HasImage
        
        public static int has_image(cef_drag_data_t* self)
        {
            return self->_has_image(self);
        }
        
    }
}
