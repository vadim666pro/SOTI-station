//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_resource_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_resource_handler_t*, cef_request_t*, int*, cef_callback_t*, int> _open;
        internal delegate* unmanaged<cef_resource_handler_t*, cef_request_t*, cef_callback_t*, int> _process_request;
        internal delegate* unmanaged<cef_resource_handler_t*, cef_response_t*, long*, cef_string_t*, void> _get_response_headers;
        internal delegate* unmanaged<cef_resource_handler_t*, long, long*, cef_resource_skip_callback_t*, int> _skip;
        internal delegate* unmanaged<cef_resource_handler_t*, void*, int, int*, cef_resource_read_callback_t*, int> _read;
        internal delegate* unmanaged<cef_resource_handler_t*, void*, int, int*, cef_callback_t*, int> _read_response;
        internal delegate* unmanaged<cef_resource_handler_t*, void> _cancel;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_resource_handler_t* self)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_resource_handler_t* self)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_resource_handler_t* self)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_resource_handler_t* self)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int open(cef_resource_handler_t* self, cef_request_t* request, int* handle_request, cef_callback_t* callback)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.open(self, request, handle_request, callback);
        }
        
        [UnmanagedCallersOnly]
        public static int process_request(cef_resource_handler_t* self, cef_request_t* request, cef_callback_t* callback)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.process_request(self, request, callback);
        }
        
        [UnmanagedCallersOnly]
        public static void get_response_headers(cef_resource_handler_t* self, cef_response_t* response, long* response_length, cef_string_t* redirectUrl)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            obj.get_response_headers(self, response, response_length, redirectUrl);
        }
        
        [UnmanagedCallersOnly]
        public static int skip(cef_resource_handler_t* self, long bytes_to_skip, long* bytes_skipped, cef_resource_skip_callback_t* callback)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.skip(self, bytes_to_skip, bytes_skipped, callback);
        }
        
        [UnmanagedCallersOnly]
        public static int read(cef_resource_handler_t* self, void* data_out, int bytes_to_read, int* bytes_read, cef_resource_read_callback_t* callback)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.read(self, data_out, bytes_to_read, bytes_read, callback);
        }
        
        [UnmanagedCallersOnly]
        public static int read_response(cef_resource_handler_t* self, void* data_out, int bytes_to_read, int* bytes_read, cef_callback_t* callback)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            return obj.read_response(self, data_out, bytes_to_read, bytes_read, callback);
        }
        
        [UnmanagedCallersOnly]
        public static void cancel(cef_resource_handler_t* self)
        {
            var obj = (CefResourceHandler)self->_obj.Target;
            obj.cancel(self);
        }
        
        internal static cef_resource_handler_t* Alloc()
        {
            var ptr = (cef_resource_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_resource_handler_t));
            *ptr = default(cef_resource_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_resource_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_resource_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_resource_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_resource_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_resource_handler_t*, int>)&has_at_least_one_ref;
            ptr->_open = &open;
            ptr->_process_request = &process_request;
            ptr->_get_response_headers = &get_response_headers;
            ptr->_skip = &skip;
            ptr->_read = &read;
            ptr->_read_response = &read_response;
            ptr->_cancel = &cancel;
            return ptr;
        }
        
        internal static void Free(cef_resource_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
