//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_cookie_manager_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_cookie_manager_t*, cef_cookie_visitor_t*, int> _visit_all_cookies;
        internal delegate* unmanaged<cef_cookie_manager_t*, cef_string_t*, int, cef_cookie_visitor_t*, int> _visit_url_cookies;
        internal delegate* unmanaged<cef_cookie_manager_t*, cef_string_t*, cef_cookie_t*, cef_set_cookie_callback_t*, int> _set_cookie;
        internal delegate* unmanaged<cef_cookie_manager_t*, cef_string_t*, cef_string_t*, cef_delete_cookies_callback_t*, int> _delete_cookies;
        internal delegate* unmanaged<cef_cookie_manager_t*, cef_completion_callback_t*, int> _flush_store;
        
        // GetGlobalManager
        [DllImport(libcef.DllName, EntryPoint = "cef_cookie_manager_get_global_manager", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_cookie_manager_t* get_global_manager(cef_completion_callback_t* callback);
        
        // AddRef
        
        public static void add_ref(cef_cookie_manager_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_cookie_manager_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_cookie_manager_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_cookie_manager_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // VisitAllCookies
        
        public static int visit_all_cookies(cef_cookie_manager_t* self, cef_cookie_visitor_t* visitor)
        {
            return self->_visit_all_cookies(self, visitor);
        }
        
        // VisitUrlCookies
        
        public static int visit_url_cookies(cef_cookie_manager_t* self, cef_string_t* url, int includeHttpOnly, cef_cookie_visitor_t* visitor)
        {
            return self->_visit_url_cookies(self, url, includeHttpOnly, visitor);
        }
        
        // SetCookie
        
        public static int set_cookie(cef_cookie_manager_t* self, cef_string_t* url, cef_cookie_t* cookie, cef_set_cookie_callback_t* callback)
        {
            return self->_set_cookie(self, url, cookie, callback);
        }
        
        // DeleteCookies
        
        public static int delete_cookies(cef_cookie_manager_t* self, cef_string_t* url, cef_string_t* cookie_name, cef_delete_cookies_callback_t* callback)
        {
            return self->_delete_cookies(self, url, cookie_name, callback);
        }
        
        // FlushStore
        
        public static int flush_store(cef_cookie_manager_t* self, cef_completion_callback_t* callback)
        {
            return self->_flush_store(self, callback);
        }
        
    }
}
