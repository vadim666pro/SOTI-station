//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_render_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_render_handler_t*, cef_accessibility_handler_t*> _get_accessibility_handler;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_rect_t*, int> _get_root_screen_rect;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_rect_t*, void> _get_view_rect;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, int, int, int*, int*, int> _get_screen_point;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_screen_info_t*, int> _get_screen_info;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, int, void> _on_popup_show;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_rect_t*, void> _on_popup_size;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, CefPaintElementType, UIntPtr, cef_rect_t*, void*, int, int, void> _on_paint;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, CefPaintElementType, UIntPtr, cef_rect_t*, cef_accelerated_paint_info_t*, void> _on_accelerated_paint;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, CefHorizontalAlignment, cef_size_t*, void> _get_touch_handle_size;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_touch_handle_state_t*, void> _on_touch_handle_state_changed;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_drag_data_t*, CefDragOperationsMask, int, int, int> _start_dragging;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, CefDragOperationsMask, void> _update_drag_cursor;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, double, double, void> _on_scroll_offset_changed;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_range_t*, UIntPtr, cef_rect_t*, void> _on_ime_composition_range_changed;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, cef_string_t*, cef_range_t*, void> _on_text_selection_changed;
        internal delegate* unmanaged<cef_render_handler_t*, cef_browser_t*, CefTextInputMode, void> _on_virtual_keyboard_requested;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_render_handler_t* self)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_render_handler_t* self)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_render_handler_t* self)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_render_handler_t* self)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static cef_accessibility_handler_t* get_accessibility_handler(cef_render_handler_t* self)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.get_accessibility_handler(self);
        }
        
        [UnmanagedCallersOnly]
        public static int get_root_screen_rect(cef_render_handler_t* self, cef_browser_t* browser, cef_rect_t* rect)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.get_root_screen_rect(self, browser, rect);
        }
        
        [UnmanagedCallersOnly]
        public static void get_view_rect(cef_render_handler_t* self, cef_browser_t* browser, cef_rect_t* rect)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.get_view_rect(self, browser, rect);
        }
        
        [UnmanagedCallersOnly]
        public static int get_screen_point(cef_render_handler_t* self, cef_browser_t* browser, int viewX, int viewY, int* screenX, int* screenY)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.get_screen_point(self, browser, viewX, viewY, screenX, screenY);
        }
        
        [UnmanagedCallersOnly]
        public static int get_screen_info(cef_render_handler_t* self, cef_browser_t* browser, cef_screen_info_t* screen_info)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.get_screen_info(self, browser, screen_info);
        }
        
        [UnmanagedCallersOnly]
        public static void on_popup_show(cef_render_handler_t* self, cef_browser_t* browser, int show)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_popup_show(self, browser, show);
        }
        
        [UnmanagedCallersOnly]
        public static void on_popup_size(cef_render_handler_t* self, cef_browser_t* browser, cef_rect_t* rect)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_popup_size(self, browser, rect);
        }
        
        [UnmanagedCallersOnly]
        public static void on_paint(cef_render_handler_t* self, cef_browser_t* browser, CefPaintElementType type, UIntPtr dirtyRectsCount, cef_rect_t* dirtyRects, void* buffer, int width, int height)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_paint(self, browser, type, dirtyRectsCount, dirtyRects, buffer, width, height);
        }
        
        [UnmanagedCallersOnly]
        public static void on_accelerated_paint(cef_render_handler_t* self, cef_browser_t* browser, CefPaintElementType type, UIntPtr dirtyRectsCount, cef_rect_t* dirtyRects, cef_accelerated_paint_info_t* info)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_accelerated_paint(self, browser, type, dirtyRectsCount, dirtyRects, info);
        }
        
        [UnmanagedCallersOnly]
        public static void get_touch_handle_size(cef_render_handler_t* self, cef_browser_t* browser, CefHorizontalAlignment orientation, cef_size_t* size)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.get_touch_handle_size(self, browser, orientation, size);
        }
        
        [UnmanagedCallersOnly]
        public static void on_touch_handle_state_changed(cef_render_handler_t* self, cef_browser_t* browser, cef_touch_handle_state_t* state)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_touch_handle_state_changed(self, browser, state);
        }
        
        [UnmanagedCallersOnly]
        public static int start_dragging(cef_render_handler_t* self, cef_browser_t* browser, cef_drag_data_t* drag_data, CefDragOperationsMask allowed_ops, int x, int y)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            return obj.start_dragging(self, browser, drag_data, allowed_ops, x, y);
        }
        
        [UnmanagedCallersOnly]
        public static void update_drag_cursor(cef_render_handler_t* self, cef_browser_t* browser, CefDragOperationsMask operation)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.update_drag_cursor(self, browser, operation);
        }
        
        [UnmanagedCallersOnly]
        public static void on_scroll_offset_changed(cef_render_handler_t* self, cef_browser_t* browser, double x, double y)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_scroll_offset_changed(self, browser, x, y);
        }
        
        [UnmanagedCallersOnly]
        public static void on_ime_composition_range_changed(cef_render_handler_t* self, cef_browser_t* browser, cef_range_t* selected_range, UIntPtr character_boundsCount, cef_rect_t* character_bounds)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_ime_composition_range_changed(self, browser, selected_range, character_boundsCount, character_bounds);
        }
        
        [UnmanagedCallersOnly]
        public static void on_text_selection_changed(cef_render_handler_t* self, cef_browser_t* browser, cef_string_t* selected_text, cef_range_t* selected_range)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_text_selection_changed(self, browser, selected_text, selected_range);
        }
        
        [UnmanagedCallersOnly]
        public static void on_virtual_keyboard_requested(cef_render_handler_t* self, cef_browser_t* browser, CefTextInputMode input_mode)
        {
            var obj = (CefRenderHandler)self->_obj.Target;
            obj.on_virtual_keyboard_requested(self, browser, input_mode);
        }
        
        internal static cef_render_handler_t* Alloc()
        {
            var ptr = (cef_render_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_render_handler_t));
            *ptr = default(cef_render_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_render_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_render_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_render_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_render_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_render_handler_t*, int>)&has_at_least_one_ref;
            ptr->_get_accessibility_handler = &get_accessibility_handler;
            ptr->_get_root_screen_rect = &get_root_screen_rect;
            ptr->_get_view_rect = &get_view_rect;
            ptr->_get_screen_point = &get_screen_point;
            ptr->_get_screen_info = &get_screen_info;
            ptr->_on_popup_show = &on_popup_show;
            ptr->_on_popup_size = &on_popup_size;
            ptr->_on_paint = &on_paint;
            ptr->_on_accelerated_paint = &on_accelerated_paint;
            ptr->_get_touch_handle_size = &get_touch_handle_size;
            ptr->_on_touch_handle_state_changed = &on_touch_handle_state_changed;
            ptr->_start_dragging = &start_dragging;
            ptr->_update_drag_cursor = &update_drag_cursor;
            ptr->_on_scroll_offset_changed = &on_scroll_offset_changed;
            ptr->_on_ime_composition_range_changed = &on_ime_composition_range_changed;
            ptr->_on_text_selection_changed = &on_text_selection_changed;
            ptr->_on_virtual_keyboard_requested = &on_virtual_keyboard_requested;
            return ptr;
        }
        
        internal static void Free(cef_render_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
