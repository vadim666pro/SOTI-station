//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_frame_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_frame_t*, int> _is_valid;
        internal delegate* unmanaged<cef_frame_t*, void> _undo;
        internal delegate* unmanaged<cef_frame_t*, void> _redo;
        internal delegate* unmanaged<cef_frame_t*, void> _cut;
        internal delegate* unmanaged<cef_frame_t*, void> _copy;
        internal delegate* unmanaged<cef_frame_t*, void> _paste;
        internal delegate* unmanaged<cef_frame_t*, void> _paste_and_match_style;
        internal delegate* unmanaged<cef_frame_t*, void> _del;
        internal delegate* unmanaged<cef_frame_t*, void> _select_all;
        internal delegate* unmanaged<cef_frame_t*, void> _view_source;
        internal delegate* unmanaged<cef_frame_t*, cef_string_visitor_t*, void> _get_source;
        internal delegate* unmanaged<cef_frame_t*, cef_string_visitor_t*, void> _get_text;
        internal delegate* unmanaged<cef_frame_t*, cef_request_t*, void> _load_request;
        internal delegate* unmanaged<cef_frame_t*, cef_string_t*, void> _load_url;
        internal delegate* unmanaged<cef_frame_t*, cef_string_t*, cef_string_t*, int, void> _execute_java_script;
        internal delegate* unmanaged<cef_frame_t*, int> _is_main;
        internal delegate* unmanaged<cef_frame_t*, int> _is_focused;
        internal delegate* unmanaged<cef_frame_t*, cef_string_userfree*> _get_name;
        internal delegate* unmanaged<cef_frame_t*, cef_string_userfree*> _get_identifier;
        internal delegate* unmanaged<cef_frame_t*, cef_frame_t*> _get_parent;
        internal delegate* unmanaged<cef_frame_t*, cef_string_userfree*> _get_url;
        internal delegate* unmanaged<cef_frame_t*, cef_browser_t*> _get_browser;
        internal delegate* unmanaged<cef_frame_t*, cef_v8context_t*> _get_v8context;
        internal delegate* unmanaged<cef_frame_t*, cef_domvisitor_t*, void> _visit_dom;
        internal delegate* unmanaged<cef_frame_t*, cef_request_t*, cef_urlrequest_client_t*, cef_urlrequest_t*> _create_urlrequest;
        internal delegate* unmanaged<cef_frame_t*, CefProcessId, cef_process_message_t*, void> _send_process_message;
        
        // AddRef
        
        public static void add_ref(cef_frame_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_frame_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_frame_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_frame_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsValid
        
        public static int is_valid(cef_frame_t* self)
        {
            return self->_is_valid(self);
        }
        
        // Undo
        
        public static void undo(cef_frame_t* self)
        {
            self->_undo(self);
        }
        
        // Redo
        
        public static void redo(cef_frame_t* self)
        {
            self->_redo(self);
        }
        
        // Cut
        
        public static void cut(cef_frame_t* self)
        {
            self->_cut(self);
        }
        
        // Copy
        
        public static void copy(cef_frame_t* self)
        {
            self->_copy(self);
        }
        
        // Paste
        
        public static void paste(cef_frame_t* self)
        {
            self->_paste(self);
        }
        
        // PasteAndMatchStyle
        
        public static void paste_and_match_style(cef_frame_t* self)
        {
            self->_paste_and_match_style(self);
        }
        
        // Delete
        
        public static void del(cef_frame_t* self)
        {
            self->_del(self);
        }
        
        // SelectAll
        
        public static void select_all(cef_frame_t* self)
        {
            self->_select_all(self);
        }
        
        // ViewSource
        
        public static void view_source(cef_frame_t* self)
        {
            self->_view_source(self);
        }
        
        // GetSource
        
        public static void get_source(cef_frame_t* self, cef_string_visitor_t* visitor)
        {
            self->_get_source(self, visitor);
        }
        
        // GetText
        
        public static void get_text(cef_frame_t* self, cef_string_visitor_t* visitor)
        {
            self->_get_text(self, visitor);
        }
        
        // LoadRequest
        
        public static void load_request(cef_frame_t* self, cef_request_t* request)
        {
            self->_load_request(self, request);
        }
        
        // LoadURL
        
        public static void load_url(cef_frame_t* self, cef_string_t* url)
        {
            self->_load_url(self, url);
        }
        
        // ExecuteJavaScript
        
        public static void execute_java_script(cef_frame_t* self, cef_string_t* code, cef_string_t* script_url, int start_line)
        {
            self->_execute_java_script(self, code, script_url, start_line);
        }
        
        // IsMain
        
        public static int is_main(cef_frame_t* self)
        {
            return self->_is_main(self);
        }
        
        // IsFocused
        
        public static int is_focused(cef_frame_t* self)
        {
            return self->_is_focused(self);
        }
        
        // GetName
        
        public static cef_string_userfree* get_name(cef_frame_t* self)
        {
            return self->_get_name(self);
        }
        
        // GetIdentifier
        
        public static cef_string_userfree* get_identifier(cef_frame_t* self)
        {
            return self->_get_identifier(self);
        }
        
        // GetParent
        
        public static cef_frame_t* get_parent(cef_frame_t* self)
        {
            return self->_get_parent(self);
        }
        
        // GetURL
        
        public static cef_string_userfree* get_url(cef_frame_t* self)
        {
            return self->_get_url(self);
        }
        
        // GetBrowser
        
        public static cef_browser_t* get_browser(cef_frame_t* self)
        {
            return self->_get_browser(self);
        }
        
        // GetV8Context
        
        public static cef_v8context_t* get_v8context(cef_frame_t* self)
        {
            return self->_get_v8context(self);
        }
        
        // VisitDOM
        
        public static void visit_dom(cef_frame_t* self, cef_domvisitor_t* visitor)
        {
            self->_visit_dom(self, visitor);
        }
        
        // CreateURLRequest
        
        public static cef_urlrequest_t* create_urlrequest(cef_frame_t* self, cef_request_t* request, cef_urlrequest_client_t* client)
        {
            return self->_create_urlrequest(self, request, client);
        }
        
        // SendProcessMessage
        
        public static void send_process_message(cef_frame_t* self, CefProcessId target_process, cef_process_message_t* message)
        {
            self->_send_process_message(self, target_process, message);
        }
        
    }
}
