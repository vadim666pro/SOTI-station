//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_media_observer_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_media_observer_t*, UIntPtr, cef_media_sink_t**, void> _on_sinks;
        internal delegate* unmanaged<cef_media_observer_t*, UIntPtr, cef_media_route_t**, void> _on_routes;
        internal delegate* unmanaged<cef_media_observer_t*, cef_media_route_t*, CefMediaRouteConnectionState, void> _on_route_state_changed;
        internal delegate* unmanaged<cef_media_observer_t*, cef_media_route_t*, void*, UIntPtr, void> _on_route_message_received;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_media_observer_t* self)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_media_observer_t* self)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_media_observer_t* self)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_media_observer_t* self)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_sinks(cef_media_observer_t* self, UIntPtr sinksCount, cef_media_sink_t** sinks)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            obj.on_sinks(self, sinksCount, sinks);
        }
        
        [UnmanagedCallersOnly]
        public static void on_routes(cef_media_observer_t* self, UIntPtr routesCount, cef_media_route_t** routes)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            obj.on_routes(self, routesCount, routes);
        }
        
        [UnmanagedCallersOnly]
        public static void on_route_state_changed(cef_media_observer_t* self, cef_media_route_t* route, CefMediaRouteConnectionState state)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            obj.on_route_state_changed(self, route, state);
        }
        
        [UnmanagedCallersOnly]
        public static void on_route_message_received(cef_media_observer_t* self, cef_media_route_t* route, void* message, UIntPtr message_size)
        {
            var obj = (CefMediaObserver)self->_obj.Target;
            obj.on_route_message_received(self, route, message, message_size);
        }
        
        internal static cef_media_observer_t* Alloc()
        {
            var ptr = (cef_media_observer_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_media_observer_t));
            *ptr = default(cef_media_observer_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_media_observer_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_media_observer_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_media_observer_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_media_observer_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_media_observer_t*, int>)&has_at_least_one_ref;
            ptr->_on_sinks = &on_sinks;
            ptr->_on_routes = &on_routes;
            ptr->_on_route_state_changed = &on_route_state_changed;
            ptr->_on_route_message_received = &on_route_message_received;
            return ptr;
        }
        
        internal static void Free(cef_media_observer_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
