//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_v8interceptor_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_v8interceptor_t*, cef_string_t*, cef_v8value_t*, cef_v8value_t**, cef_string_t*, int> _get_byname;
        internal delegate* unmanaged<cef_v8interceptor_t*, int, cef_v8value_t*, cef_v8value_t**, cef_string_t*, int> _get_byindex;
        internal delegate* unmanaged<cef_v8interceptor_t*, cef_string_t*, cef_v8value_t*, cef_v8value_t*, cef_string_t*, int> _set_byname;
        internal delegate* unmanaged<cef_v8interceptor_t*, int, cef_v8value_t*, cef_v8value_t*, cef_string_t*, int> _set_byindex;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_v8interceptor_t* self)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_v8interceptor_t* self)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_v8interceptor_t* self)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_v8interceptor_t* self)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int get_byname(cef_v8interceptor_t* self, cef_string_t* name, cef_v8value_t* @object, cef_v8value_t** retval, cef_string_t* exception)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.get_byname(self, name, @object, retval, exception);
        }
        
        [UnmanagedCallersOnly]
        public static int get_byindex(cef_v8interceptor_t* self, int index, cef_v8value_t* @object, cef_v8value_t** retval, cef_string_t* exception)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.get_byindex(self, index, @object, retval, exception);
        }
        
        [UnmanagedCallersOnly]
        public static int set_byname(cef_v8interceptor_t* self, cef_string_t* name, cef_v8value_t* @object, cef_v8value_t* value, cef_string_t* exception)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.set_byname(self, name, @object, value, exception);
        }
        
        [UnmanagedCallersOnly]
        public static int set_byindex(cef_v8interceptor_t* self, int index, cef_v8value_t* @object, cef_v8value_t* value, cef_string_t* exception)
        {
            var obj = (CefV8Interceptor)self->_obj.Target;
            return obj.set_byindex(self, index, @object, value, exception);
        }
        
        internal static cef_v8interceptor_t* Alloc()
        {
            var ptr = (cef_v8interceptor_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_v8interceptor_t));
            *ptr = default(cef_v8interceptor_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_v8interceptor_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_v8interceptor_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_v8interceptor_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_v8interceptor_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_v8interceptor_t*, int>)&has_at_least_one_ref;
            ptr->_get_byname = &get_byname;
            ptr->_get_byindex = &get_byindex;
            ptr->_set_byname = &set_byname;
            ptr->_set_byindex = &set_byindex;
            return ptr;
        }
        
        internal static void Free(cef_v8interceptor_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
