//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_browser_process_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_browser_process_handler_t*, CefPreferencesType, cef_preference_registrar_t*, void> _on_register_custom_preferences;
        internal delegate* unmanaged<cef_browser_process_handler_t*, void> _on_context_initialized;
        internal delegate* unmanaged<cef_browser_process_handler_t*, cef_command_line_t*, void> _on_before_child_process_launch;
        internal delegate* unmanaged<cef_browser_process_handler_t*, cef_command_line_t*, cef_string_t*, int> _on_already_running_app_relaunch;
        internal delegate* unmanaged<cef_browser_process_handler_t*, long, void> _on_schedule_message_pump_work;
        internal delegate* unmanaged<cef_browser_process_handler_t*, cef_client_t*> _get_default_client;
        internal delegate* unmanaged<cef_browser_process_handler_t*, cef_request_context_handler_t*> _get_default_request_context_handler;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_register_custom_preferences(cef_browser_process_handler_t* self, CefPreferencesType type, cef_preference_registrar_t* registrar)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            obj.on_register_custom_preferences(self, type, registrar);
        }
        
        [UnmanagedCallersOnly]
        public static void on_context_initialized(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            obj.on_context_initialized(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_before_child_process_launch(cef_browser_process_handler_t* self, cef_command_line_t* command_line)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            obj.on_before_child_process_launch(self, command_line);
        }
        
        [UnmanagedCallersOnly]
        public static int on_already_running_app_relaunch(cef_browser_process_handler_t* self, cef_command_line_t* command_line, cef_string_t* current_directory)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            return obj.on_already_running_app_relaunch(self, command_line, current_directory);
        }
        
        [UnmanagedCallersOnly]
        public static void on_schedule_message_pump_work(cef_browser_process_handler_t* self, long delay_ms)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            obj.on_schedule_message_pump_work(self, delay_ms);
        }
        
        [UnmanagedCallersOnly]
        public static cef_client_t* get_default_client(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            return obj.get_default_client(self);
        }
        
        [UnmanagedCallersOnly]
        public static cef_request_context_handler_t* get_default_request_context_handler(cef_browser_process_handler_t* self)
        {
            var obj = (CefBrowserProcessHandler)self->_obj.Target;
            return obj.get_default_request_context_handler(self);
        }
        
        internal static cef_browser_process_handler_t* Alloc()
        {
            var ptr = (cef_browser_process_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_browser_process_handler_t));
            *ptr = default(cef_browser_process_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_browser_process_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_browser_process_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_browser_process_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_browser_process_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_browser_process_handler_t*, int>)&has_at_least_one_ref;
            ptr->_on_register_custom_preferences = &on_register_custom_preferences;
            ptr->_on_context_initialized = &on_context_initialized;
            ptr->_on_before_child_process_launch = &on_before_child_process_launch;
            ptr->_on_already_running_app_relaunch = &on_already_running_app_relaunch;
            ptr->_on_schedule_message_pump_work = &on_schedule_message_pump_work;
            ptr->_get_default_client = &get_default_client;
            ptr->_get_default_request_context_handler = &get_default_request_context_handler;
            return ptr;
        }
        
        internal static void Free(cef_browser_process_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
