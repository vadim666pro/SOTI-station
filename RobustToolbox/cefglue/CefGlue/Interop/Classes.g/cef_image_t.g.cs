//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_image_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_image_t*, int> _is_empty;
        internal delegate* unmanaged<cef_image_t*, cef_image_t*, int> _is_same;
        internal delegate* unmanaged<cef_image_t*, float, int, int, CefColorType, CefAlphaType, void*, UIntPtr, int> _add_bitmap;
        internal delegate* unmanaged<cef_image_t*, float, void*, UIntPtr, int> _add_png;
        internal delegate* unmanaged<cef_image_t*, float, void*, UIntPtr, int> _add_jpeg;
        internal delegate* unmanaged<cef_image_t*, UIntPtr> _get_width;
        internal delegate* unmanaged<cef_image_t*, UIntPtr> _get_height;
        internal delegate* unmanaged<cef_image_t*, float, int> _has_representation;
        internal delegate* unmanaged<cef_image_t*, float, int> _remove_representation;
        internal delegate* unmanaged<cef_image_t*, float, float*, int*, int*, int> _get_representation_info;
        internal delegate* unmanaged<cef_image_t*, float, CefColorType, CefAlphaType, int*, int*, cef_binary_value_t*> _get_as_bitmap;
        internal delegate* unmanaged<cef_image_t*, float, int, int*, int*, cef_binary_value_t*> _get_as_png;
        internal delegate* unmanaged<cef_image_t*, float, int, int*, int*, cef_binary_value_t*> _get_as_jpeg;
        
        // CreateImage
        [DllImport(libcef.DllName, EntryPoint = "cef_image_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_image_t* create();
        
        // AddRef
        
        public static void add_ref(cef_image_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_image_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_image_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_image_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsEmpty
        
        public static int is_empty(cef_image_t* self)
        {
            return self->_is_empty(self);
        }
        
        // IsSame
        
        public static int is_same(cef_image_t* self, cef_image_t* that)
        {
            return self->_is_same(self, that);
        }
        
        // AddBitmap
        
        public static int add_bitmap(cef_image_t* self, float scale_factor, int pixel_width, int pixel_height, CefColorType color_type, CefAlphaType alpha_type, void* pixel_data, UIntPtr pixel_data_size)
        {
            return self->_add_bitmap(self, scale_factor, pixel_width, pixel_height, color_type, alpha_type, pixel_data, pixel_data_size);
        }
        
        // AddPNG
        
        public static int add_png(cef_image_t* self, float scale_factor, void* png_data, UIntPtr png_data_size)
        {
            return self->_add_png(self, scale_factor, png_data, png_data_size);
        }
        
        // AddJPEG
        
        public static int add_jpeg(cef_image_t* self, float scale_factor, void* jpeg_data, UIntPtr jpeg_data_size)
        {
            return self->_add_jpeg(self, scale_factor, jpeg_data, jpeg_data_size);
        }
        
        // GetWidth
        
        public static UIntPtr get_width(cef_image_t* self)
        {
            return self->_get_width(self);
        }
        
        // GetHeight
        
        public static UIntPtr get_height(cef_image_t* self)
        {
            return self->_get_height(self);
        }
        
        // HasRepresentation
        
        public static int has_representation(cef_image_t* self, float scale_factor)
        {
            return self->_has_representation(self, scale_factor);
        }
        
        // RemoveRepresentation
        
        public static int remove_representation(cef_image_t* self, float scale_factor)
        {
            return self->_remove_representation(self, scale_factor);
        }
        
        // GetRepresentationInfo
        
        public static int get_representation_info(cef_image_t* self, float scale_factor, float* actual_scale_factor, int* pixel_width, int* pixel_height)
        {
            return self->_get_representation_info(self, scale_factor, actual_scale_factor, pixel_width, pixel_height);
        }
        
        // GetAsBitmap
        
        public static cef_binary_value_t* get_as_bitmap(cef_image_t* self, float scale_factor, CefColorType color_type, CefAlphaType alpha_type, int* pixel_width, int* pixel_height)
        {
            return self->_get_as_bitmap(self, scale_factor, color_type, alpha_type, pixel_width, pixel_height);
        }
        
        // GetAsPNG
        
        public static cef_binary_value_t* get_as_png(cef_image_t* self, float scale_factor, int with_transparency, int* pixel_width, int* pixel_height)
        {
            return self->_get_as_png(self, scale_factor, with_transparency, pixel_width, pixel_height);
        }
        
        // GetAsJPEG
        
        public static cef_binary_value_t* get_as_jpeg(cef_image_t* self, float scale_factor, int quality, int* pixel_width, int* pixel_height)
        {
            return self->_get_as_jpeg(self, scale_factor, quality, pixel_width, pixel_height);
        }
        
    }
}
