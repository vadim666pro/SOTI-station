//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_v8value_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_valid;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_undefined;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_null;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_bool;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_int;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_uint;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_double;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_date;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_string;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_object;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_array;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_array_buffer;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_function;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_promise;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8value_t*, int> _is_same;
        internal delegate* unmanaged<cef_v8value_t*, int> _get_bool_value;
        internal delegate* unmanaged<cef_v8value_t*, int> _get_int_value;
        internal delegate* unmanaged<cef_v8value_t*, uint> _get_uint_value;
        internal delegate* unmanaged<cef_v8value_t*, double> _get_double_value;
        internal delegate* unmanaged<cef_v8value_t*, CefBaseTime> _get_date_value;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_userfree*> _get_string_value;
        internal delegate* unmanaged<cef_v8value_t*, int> _is_user_created;
        internal delegate* unmanaged<cef_v8value_t*, int> _has_exception;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8exception_t*> _get_exception;
        internal delegate* unmanaged<cef_v8value_t*, int> _clear_exception;
        internal delegate* unmanaged<cef_v8value_t*, int> _will_rethrow_exceptions;
        internal delegate* unmanaged<cef_v8value_t*, int, int> _set_rethrow_exceptions;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_t*, int> _has_value_bykey;
        internal delegate* unmanaged<cef_v8value_t*, int, int> _has_value_byindex;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_t*, int> _delete_value_bykey;
        internal delegate* unmanaged<cef_v8value_t*, int, int> _delete_value_byindex;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_t*, cef_v8value_t*> _get_value_bykey;
        internal delegate* unmanaged<cef_v8value_t*, int, cef_v8value_t*> _get_value_byindex;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_t*, cef_v8value_t*, CefV8PropertyAttribute, int> _set_value_bykey;
        internal delegate* unmanaged<cef_v8value_t*, int, cef_v8value_t*, int> _set_value_byindex;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_t*, CefV8PropertyAttribute, int> _set_value_byaccessor;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_list*, int> _get_keys;
        internal delegate* unmanaged<cef_v8value_t*, cef_base_ref_counted_t*, int> _set_user_data;
        internal delegate* unmanaged<cef_v8value_t*, cef_base_ref_counted_t*> _get_user_data;
        internal delegate* unmanaged<cef_v8value_t*, int> _get_externally_allocated_memory;
        internal delegate* unmanaged<cef_v8value_t*, int, int> _adjust_externally_allocated_memory;
        internal delegate* unmanaged<cef_v8value_t*, int> _get_array_length;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8array_buffer_release_callback_t*> _get_array_buffer_release_callback;
        internal delegate* unmanaged<cef_v8value_t*, int> _neuter_array_buffer;
        internal delegate* unmanaged<cef_v8value_t*, UIntPtr> _get_array_buffer_byte_length;
        internal delegate* unmanaged<cef_v8value_t*, void*> _get_array_buffer_data;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_userfree*> _get_function_name;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8handler_t*> _get_function_handler;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8value_t*, UIntPtr, cef_v8value_t**, cef_v8value_t*> _execute_function;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8context_t*, cef_v8value_t*, UIntPtr, cef_v8value_t**, cef_v8value_t*> _execute_function_with_context;
        internal delegate* unmanaged<cef_v8value_t*, cef_v8value_t*, int> _resolve_promise;
        internal delegate* unmanaged<cef_v8value_t*, cef_string_t*, int> _reject_promise;
        
        // CreateUndefined
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_undefined", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_undefined();
        
        // CreateNull
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_null", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_null();
        
        // CreateBool
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_bool", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_bool(int value);
        
        // CreateInt
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_int", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_int(int value);
        
        // CreateUInt
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_uint", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_uint(uint value);
        
        // CreateDouble
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_double", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_double(double value);
        
        // CreateDate
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_date", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_date(CefBaseTime date);
        
        // CreateString
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_string", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_string(cef_string_t* value);
        
        // CreateObject
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_object", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_object(cef_v8accessor_t* accessor, cef_v8interceptor_t* interceptor);
        
        // CreateArray
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_array", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_array(int length);
        
        // CreateArrayBuffer
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_array_buffer", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_array_buffer(void* buffer, UIntPtr length, cef_v8array_buffer_release_callback_t* release_callback);
        
        // CreateArrayBufferWithCopy
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_array_buffer_with_copy", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_array_buffer_with_copy(void* buffer, UIntPtr length);
        
        // CreateFunction
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_function", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_function(cef_string_t* name, cef_v8handler_t* handler);
        
        // CreatePromise
        [DllImport(libcef.DllName, EntryPoint = "cef_v8value_create_promise", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_v8value_t* create_promise();
        
        // AddRef
        
        public static void add_ref(cef_v8value_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_v8value_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_v8value_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_v8value_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsValid
        
        public static int is_valid(cef_v8value_t* self)
        {
            return self->_is_valid(self);
        }
        
        // IsUndefined
        
        public static int is_undefined(cef_v8value_t* self)
        {
            return self->_is_undefined(self);
        }
        
        // IsNull
        
        public static int is_null(cef_v8value_t* self)
        {
            return self->_is_null(self);
        }
        
        // IsBool
        
        public static int is_bool(cef_v8value_t* self)
        {
            return self->_is_bool(self);
        }
        
        // IsInt
        
        public static int is_int(cef_v8value_t* self)
        {
            return self->_is_int(self);
        }
        
        // IsUInt
        
        public static int is_uint(cef_v8value_t* self)
        {
            return self->_is_uint(self);
        }
        
        // IsDouble
        
        public static int is_double(cef_v8value_t* self)
        {
            return self->_is_double(self);
        }
        
        // IsDate
        
        public static int is_date(cef_v8value_t* self)
        {
            return self->_is_date(self);
        }
        
        // IsString
        
        public static int is_string(cef_v8value_t* self)
        {
            return self->_is_string(self);
        }
        
        // IsObject
        
        public static int is_object(cef_v8value_t* self)
        {
            return self->_is_object(self);
        }
        
        // IsArray
        
        public static int is_array(cef_v8value_t* self)
        {
            return self->_is_array(self);
        }
        
        // IsArrayBuffer
        
        public static int is_array_buffer(cef_v8value_t* self)
        {
            return self->_is_array_buffer(self);
        }
        
        // IsFunction
        
        public static int is_function(cef_v8value_t* self)
        {
            return self->_is_function(self);
        }
        
        // IsPromise
        
        public static int is_promise(cef_v8value_t* self)
        {
            return self->_is_promise(self);
        }
        
        // IsSame
        
        public static int is_same(cef_v8value_t* self, cef_v8value_t* that)
        {
            return self->_is_same(self, that);
        }
        
        // GetBoolValue
        
        public static int get_bool_value(cef_v8value_t* self)
        {
            return self->_get_bool_value(self);
        }
        
        // GetIntValue
        
        public static int get_int_value(cef_v8value_t* self)
        {
            return self->_get_int_value(self);
        }
        
        // GetUIntValue
        
        public static uint get_uint_value(cef_v8value_t* self)
        {
            return self->_get_uint_value(self);
        }
        
        // GetDoubleValue
        
        public static double get_double_value(cef_v8value_t* self)
        {
            return self->_get_double_value(self);
        }
        
        // GetDateValue
        
        public static CefBaseTime get_date_value(cef_v8value_t* self)
        {
            return self->_get_date_value(self);
        }
        
        // GetStringValue
        
        public static cef_string_userfree* get_string_value(cef_v8value_t* self)
        {
            return self->_get_string_value(self);
        }
        
        // IsUserCreated
        
        public static int is_user_created(cef_v8value_t* self)
        {
            return self->_is_user_created(self);
        }
        
        // HasException
        
        public static int has_exception(cef_v8value_t* self)
        {
            return self->_has_exception(self);
        }
        
        // GetException
        
        public static cef_v8exception_t* get_exception(cef_v8value_t* self)
        {
            return self->_get_exception(self);
        }
        
        // ClearException
        
        public static int clear_exception(cef_v8value_t* self)
        {
            return self->_clear_exception(self);
        }
        
        // WillRethrowExceptions
        
        public static int will_rethrow_exceptions(cef_v8value_t* self)
        {
            return self->_will_rethrow_exceptions(self);
        }
        
        // SetRethrowExceptions
        
        public static int set_rethrow_exceptions(cef_v8value_t* self, int rethrow)
        {
            return self->_set_rethrow_exceptions(self, rethrow);
        }
        
        // HasValue
        
        public static int has_value_bykey(cef_v8value_t* self, cef_string_t* key)
        {
            return self->_has_value_bykey(self, key);
        }
        
        // HasValue
        
        public static int has_value_byindex(cef_v8value_t* self, int index)
        {
            return self->_has_value_byindex(self, index);
        }
        
        // DeleteValue
        
        public static int delete_value_bykey(cef_v8value_t* self, cef_string_t* key)
        {
            return self->_delete_value_bykey(self, key);
        }
        
        // DeleteValue
        
        public static int delete_value_byindex(cef_v8value_t* self, int index)
        {
            return self->_delete_value_byindex(self, index);
        }
        
        // GetValue
        
        public static cef_v8value_t* get_value_bykey(cef_v8value_t* self, cef_string_t* key)
        {
            return self->_get_value_bykey(self, key);
        }
        
        // GetValue
        
        public static cef_v8value_t* get_value_byindex(cef_v8value_t* self, int index)
        {
            return self->_get_value_byindex(self, index);
        }
        
        // SetValue
        
        public static int set_value_bykey(cef_v8value_t* self, cef_string_t* key, cef_v8value_t* value, CefV8PropertyAttribute attribute)
        {
            return self->_set_value_bykey(self, key, value, attribute);
        }
        
        // SetValue
        
        public static int set_value_byindex(cef_v8value_t* self, int index, cef_v8value_t* value)
        {
            return self->_set_value_byindex(self, index, value);
        }
        
        // SetValue
        
        public static int set_value_byaccessor(cef_v8value_t* self, cef_string_t* key, CefV8PropertyAttribute attribute)
        {
            return self->_set_value_byaccessor(self, key, attribute);
        }
        
        // GetKeys
        
        public static int get_keys(cef_v8value_t* self, cef_string_list* keys)
        {
            return self->_get_keys(self, keys);
        }
        
        // SetUserData
        
        public static int set_user_data(cef_v8value_t* self, cef_base_ref_counted_t* user_data)
        {
            return self->_set_user_data(self, user_data);
        }
        
        // GetUserData
        
        public static cef_base_ref_counted_t* get_user_data(cef_v8value_t* self)
        {
            return self->_get_user_data(self);
        }
        
        // GetExternallyAllocatedMemory
        
        public static int get_externally_allocated_memory(cef_v8value_t* self)
        {
            return self->_get_externally_allocated_memory(self);
        }
        
        // AdjustExternallyAllocatedMemory
        
        public static int adjust_externally_allocated_memory(cef_v8value_t* self, int change_in_bytes)
        {
            return self->_adjust_externally_allocated_memory(self, change_in_bytes);
        }
        
        // GetArrayLength
        
        public static int get_array_length(cef_v8value_t* self)
        {
            return self->_get_array_length(self);
        }
        
        // GetArrayBufferReleaseCallback
        
        public static cef_v8array_buffer_release_callback_t* get_array_buffer_release_callback(cef_v8value_t* self)
        {
            return self->_get_array_buffer_release_callback(self);
        }
        
        // NeuterArrayBuffer
        
        public static int neuter_array_buffer(cef_v8value_t* self)
        {
            return self->_neuter_array_buffer(self);
        }
        
        // GetArrayBufferByteLength
        
        public static UIntPtr get_array_buffer_byte_length(cef_v8value_t* self)
        {
            return self->_get_array_buffer_byte_length(self);
        }
        
        // GetArrayBufferData
        
        public static void* get_array_buffer_data(cef_v8value_t* self)
        {
            return self->_get_array_buffer_data(self);
        }
        
        // GetFunctionName
        
        public static cef_string_userfree* get_function_name(cef_v8value_t* self)
        {
            return self->_get_function_name(self);
        }
        
        // GetFunctionHandler
        
        public static cef_v8handler_t* get_function_handler(cef_v8value_t* self)
        {
            return self->_get_function_handler(self);
        }
        
        // ExecuteFunction
        
        public static cef_v8value_t* execute_function(cef_v8value_t* self, cef_v8value_t* @object, UIntPtr argumentsCount, cef_v8value_t** arguments)
        {
            return self->_execute_function(self, @object, argumentsCount, arguments);
        }
        
        // ExecuteFunctionWithContext
        
        public static cef_v8value_t* execute_function_with_context(cef_v8value_t* self, cef_v8context_t* context, cef_v8value_t* @object, UIntPtr argumentsCount, cef_v8value_t** arguments)
        {
            return self->_execute_function_with_context(self, context, @object, argumentsCount, arguments);
        }
        
        // ResolvePromise
        
        public static int resolve_promise(cef_v8value_t* self, cef_v8value_t* arg)
        {
            return self->_resolve_promise(self, arg);
        }
        
        // RejectPromise
        
        public static int reject_promise(cef_v8value_t* self, cef_string_t* errorMsg)
        {
            return self->_reject_promise(self, errorMsg);
        }
        
    }
}
