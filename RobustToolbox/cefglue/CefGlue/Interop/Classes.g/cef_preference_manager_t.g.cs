//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_preference_manager_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_preference_manager_t*, cef_string_t*, int> _has_preference;
        internal delegate* unmanaged<cef_preference_manager_t*, cef_string_t*, cef_value_t*> _get_preference;
        internal delegate* unmanaged<cef_preference_manager_t*, int, cef_dictionary_value_t*> _get_all_preferences;
        internal delegate* unmanaged<cef_preference_manager_t*, cef_string_t*, int> _can_set_preference;
        internal delegate* unmanaged<cef_preference_manager_t*, cef_string_t*, cef_value_t*, cef_string_t*, int> _set_preference;
        
        // GetGlobalPreferenceManager
        [DllImport(libcef.DllName, EntryPoint = "cef_preference_manager_get_global", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_preference_manager_t* get_global();
        
        // AddRef
        
        public static void add_ref(cef_preference_manager_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_preference_manager_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_preference_manager_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_preference_manager_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasPreference
        
        public static int has_preference(cef_preference_manager_t* self, cef_string_t* name)
        {
            return self->_has_preference(self, name);
        }
        
        // GetPreference
        
        public static cef_value_t* get_preference(cef_preference_manager_t* self, cef_string_t* name)
        {
            return self->_get_preference(self, name);
        }
        
        // GetAllPreferences
        
        public static cef_dictionary_value_t* get_all_preferences(cef_preference_manager_t* self, int include_defaults)
        {
            return self->_get_all_preferences(self, include_defaults);
        }
        
        // CanSetPreference
        
        public static int can_set_preference(cef_preference_manager_t* self, cef_string_t* name)
        {
            return self->_can_set_preference(self, name);
        }
        
        // SetPreference
        
        public static int set_preference(cef_preference_manager_t* self, cef_string_t* name, cef_value_t* value, cef_string_t* error)
        {
            return self->_set_preference(self, name, value, error);
        }
        
    }
}
