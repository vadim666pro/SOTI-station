//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_task_manager_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_task_manager_t*, UIntPtr> _get_tasks_count;
        internal delegate* unmanaged<cef_task_manager_t*, UIntPtr*, long*, int> _get_task_ids_list;
        internal delegate* unmanaged<cef_task_manager_t*, long, cef_task_info_t*, int> _get_task_info;
        internal delegate* unmanaged<cef_task_manager_t*, long, int> _kill_task;
        internal delegate* unmanaged<cef_task_manager_t*, int, long> _get_task_id_for_browser_id;
        
        // GetTaskManager
        [DllImport(libcef.DllName, EntryPoint = "cef_task_manager_get", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_task_manager_t* get();
        
        // AddRef
        
        public static void add_ref(cef_task_manager_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_task_manager_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_task_manager_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_task_manager_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // GetTasksCount
        
        public static UIntPtr get_tasks_count(cef_task_manager_t* self)
        {
            return self->_get_tasks_count(self);
        }
        
        // GetTaskIdsList
        
        public static int get_task_ids_list(cef_task_manager_t* self, UIntPtr* task_idsCount, long* task_ids)
        {
            return self->_get_task_ids_list(self, task_idsCount, task_ids);
        }
        
        // GetTaskInfo
        
        public static int get_task_info(cef_task_manager_t* self, long task_id, cef_task_info_t* info)
        {
            return self->_get_task_info(self, task_id, info);
        }
        
        // KillTask
        
        public static int kill_task(cef_task_manager_t* self, long task_id)
        {
            return self->_kill_task(self, task_id);
        }
        
        // GetTaskIdForBrowserId
        
        public static long get_task_id_for_browser_id(cef_task_manager_t* self, int browser_id)
        {
            return self->_get_task_id_for_browser_id(self, browser_id);
        }
        
    }
}
