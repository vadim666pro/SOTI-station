//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_process_message_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_process_message_t*, int> _is_valid;
        internal delegate* unmanaged<cef_process_message_t*, int> _is_read_only;
        internal delegate* unmanaged<cef_process_message_t*, cef_process_message_t*> _copy;
        internal delegate* unmanaged<cef_process_message_t*, cef_string_userfree*> _get_name;
        internal delegate* unmanaged<cef_process_message_t*, cef_list_value_t*> _get_argument_list;
        internal delegate* unmanaged<cef_process_message_t*, cef_shared_memory_region_t*> _get_shared_memory_region;
        
        // Create
        [DllImport(libcef.DllName, EntryPoint = "cef_process_message_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_process_message_t* create(cef_string_t* name);
        
        // AddRef
        
        public static void add_ref(cef_process_message_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_process_message_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_process_message_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_process_message_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsValid
        
        public static int is_valid(cef_process_message_t* self)
        {
            return self->_is_valid(self);
        }
        
        // IsReadOnly
        
        public static int is_read_only(cef_process_message_t* self)
        {
            return self->_is_read_only(self);
        }
        
        // Copy
        
        public static cef_process_message_t* copy(cef_process_message_t* self)
        {
            return self->_copy(self);
        }
        
        // GetName
        
        public static cef_string_userfree* get_name(cef_process_message_t* self)
        {
            return self->_get_name(self);
        }
        
        // GetArgumentList
        
        public static cef_list_value_t* get_argument_list(cef_process_message_t* self)
        {
            return self->_get_argument_list(self);
        }
        
        // GetSharedMemoryRegion
        
        public static cef_shared_memory_region_t* get_shared_memory_region(cef_process_message_t* self)
        {
            return self->_get_shared_memory_region(self);
        }
        
    }
}
