//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_binary_value_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_binary_value_t*, int> _is_valid;
        internal delegate* unmanaged<cef_binary_value_t*, int> _is_owned;
        internal delegate* unmanaged<cef_binary_value_t*, cef_binary_value_t*, int> _is_same;
        internal delegate* unmanaged<cef_binary_value_t*, cef_binary_value_t*, int> _is_equal;
        internal delegate* unmanaged<cef_binary_value_t*, cef_binary_value_t*> _copy;
        internal delegate* unmanaged<cef_binary_value_t*, void*> _get_raw_data;
        internal delegate* unmanaged<cef_binary_value_t*, UIntPtr> _get_size;
        internal delegate* unmanaged<cef_binary_value_t*, void*, UIntPtr, UIntPtr, UIntPtr> _get_data;
        
        // Create
        [DllImport(libcef.DllName, EntryPoint = "cef_binary_value_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_binary_value_t* create(void* data, UIntPtr data_size);
        
        // AddRef
        
        public static void add_ref(cef_binary_value_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_binary_value_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_binary_value_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_binary_value_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsValid
        
        public static int is_valid(cef_binary_value_t* self)
        {
            return self->_is_valid(self);
        }
        
        // IsOwned
        
        public static int is_owned(cef_binary_value_t* self)
        {
            return self->_is_owned(self);
        }
        
        // IsSame
        
        public static int is_same(cef_binary_value_t* self, cef_binary_value_t* that)
        {
            return self->_is_same(self, that);
        }
        
        // IsEqual
        
        public static int is_equal(cef_binary_value_t* self, cef_binary_value_t* that)
        {
            return self->_is_equal(self, that);
        }
        
        // Copy
        
        public static cef_binary_value_t* copy(cef_binary_value_t* self)
        {
            return self->_copy(self);
        }
        
        // GetRawData
        
        public static void* get_raw_data(cef_binary_value_t* self)
        {
            return self->_get_raw_data(self);
        }
        
        // GetSize
        
        public static UIntPtr get_size(cef_binary_value_t* self)
        {
            return self->_get_size(self);
        }
        
        // GetData
        
        public static UIntPtr get_data(cef_binary_value_t* self, void* buffer, UIntPtr buffer_size, UIntPtr data_offset)
        {
            return self->_get_data(self, buffer, buffer_size, data_offset);
        }
        
    }
}
