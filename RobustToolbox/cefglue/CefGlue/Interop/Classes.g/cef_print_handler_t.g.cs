//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_print_handler_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_print_handler_t*, cef_browser_t*, void> _on_print_start;
        internal delegate* unmanaged<cef_print_handler_t*, cef_browser_t*, cef_print_settings_t*, int, void> _on_print_settings;
        internal delegate* unmanaged<cef_print_handler_t*, cef_browser_t*, int, cef_print_dialog_callback_t*, int> _on_print_dialog;
        internal delegate* unmanaged<cef_print_handler_t*, cef_browser_t*, cef_string_t*, cef_string_t*, cef_print_job_callback_t*, int> _on_print_job;
        internal delegate* unmanaged<cef_print_handler_t*, cef_browser_t*, void> _on_print_reset;
        internal delegate* unmanaged<cef_print_handler_t*, cef_browser_t*, int, cef_size_t> _get_pdf_paper_size;
        
        internal GCHandle _obj;
        
        [UnmanagedCallersOnly]
        public static void add_ref(cef_print_handler_t* self)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            obj.add_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int release(cef_print_handler_t* self)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            return obj.release(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_one_ref(cef_print_handler_t* self)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            return obj.has_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static int has_at_least_one_ref(cef_print_handler_t* self)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            return obj.has_at_least_one_ref(self);
        }
        
        [UnmanagedCallersOnly]
        public static void on_print_start(cef_print_handler_t* self, cef_browser_t* browser)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            obj.on_print_start(self, browser);
        }
        
        [UnmanagedCallersOnly]
        public static void on_print_settings(cef_print_handler_t* self, cef_browser_t* browser, cef_print_settings_t* settings, int get_defaults)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            obj.on_print_settings(self, browser, settings, get_defaults);
        }
        
        [UnmanagedCallersOnly]
        public static int on_print_dialog(cef_print_handler_t* self, cef_browser_t* browser, int has_selection, cef_print_dialog_callback_t* callback)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            return obj.on_print_dialog(self, browser, has_selection, callback);
        }
        
        [UnmanagedCallersOnly]
        public static int on_print_job(cef_print_handler_t* self, cef_browser_t* browser, cef_string_t* document_name, cef_string_t* pdf_file_path, cef_print_job_callback_t* callback)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            return obj.on_print_job(self, browser, document_name, pdf_file_path, callback);
        }
        
        [UnmanagedCallersOnly]
        public static void on_print_reset(cef_print_handler_t* self, cef_browser_t* browser)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            obj.on_print_reset(self, browser);
        }
        
        [UnmanagedCallersOnly]
        public static cef_size_t get_pdf_paper_size(cef_print_handler_t* self, cef_browser_t* browser, int device_units_per_inch)
        {
            var obj = (CefPrintHandler)self->_obj.Target;
            return obj.get_pdf_paper_size(self, browser, device_units_per_inch);
        }
        
        internal static cef_print_handler_t* Alloc()
        {
            var ptr = (cef_print_handler_t*)NativeMemory.Alloc((UIntPtr)sizeof(cef_print_handler_t));
            *ptr = default(cef_print_handler_t);
            ptr->_base._size = (UIntPtr)sizeof(cef_print_handler_t);
            ptr->_base._add_ref = (delegate* unmanaged<cef_base_ref_counted_t*, void>)(delegate* unmanaged<cef_print_handler_t*, void>)&add_ref;
            ptr->_base._release = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_print_handler_t*, int>)&release;
            ptr->_base._has_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_print_handler_t*, int>)&has_one_ref;
            ptr->_base._has_at_least_one_ref = (delegate* unmanaged<cef_base_ref_counted_t*, int>)(delegate* unmanaged<cef_print_handler_t*, int>)&has_at_least_one_ref;
            ptr->_on_print_start = &on_print_start;
            ptr->_on_print_settings = &on_print_settings;
            ptr->_on_print_dialog = &on_print_dialog;
            ptr->_on_print_job = &on_print_job;
            ptr->_on_print_reset = &on_print_reset;
            ptr->_get_pdf_paper_size = &get_pdf_paper_size;
            return ptr;
        }
        
        internal static void Free(cef_print_handler_t* ptr)
        {
            NativeMemory.Free((void*)ptr);
        }
        
    }
}
