//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_request_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_request_t*, int> _is_read_only;
        internal delegate* unmanaged<cef_request_t*, cef_string_userfree*> _get_url;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, void> _set_url;
        internal delegate* unmanaged<cef_request_t*, cef_string_userfree*> _get_method;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, void> _set_method;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, CefReferrerPolicy, void> _set_referrer;
        internal delegate* unmanaged<cef_request_t*, cef_string_userfree*> _get_referrer_url;
        internal delegate* unmanaged<cef_request_t*, CefReferrerPolicy> _get_referrer_policy;
        internal delegate* unmanaged<cef_request_t*, cef_post_data_t*> _get_post_data;
        internal delegate* unmanaged<cef_request_t*, cef_post_data_t*, void> _set_post_data;
        internal delegate* unmanaged<cef_request_t*, cef_string_multimap*, void> _get_header_map;
        internal delegate* unmanaged<cef_request_t*, cef_string_multimap*, void> _set_header_map;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, cef_string_userfree*> _get_header_by_name;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, cef_string_t*, int, void> _set_header_by_name;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, cef_string_t*, cef_post_data_t*, cef_string_multimap*, void> _set;
        internal delegate* unmanaged<cef_request_t*, int> _get_flags;
        internal delegate* unmanaged<cef_request_t*, int, void> _set_flags;
        internal delegate* unmanaged<cef_request_t*, cef_string_userfree*> _get_first_party_for_cookies;
        internal delegate* unmanaged<cef_request_t*, cef_string_t*, void> _set_first_party_for_cookies;
        internal delegate* unmanaged<cef_request_t*, CefResourceType> _get_resource_type;
        internal delegate* unmanaged<cef_request_t*, CefTransitionType> _get_transition_type;
        internal delegate* unmanaged<cef_request_t*, ulong> _get_identifier;
        
        // Create
        [DllImport(libcef.DllName, EntryPoint = "cef_request_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_request_t* create();
        
        // AddRef
        
        public static void add_ref(cef_request_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_request_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_request_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_request_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsReadOnly
        
        public static int is_read_only(cef_request_t* self)
        {
            return self->_is_read_only(self);
        }
        
        // GetURL
        
        public static cef_string_userfree* get_url(cef_request_t* self)
        {
            return self->_get_url(self);
        }
        
        // SetURL
        
        public static void set_url(cef_request_t* self, cef_string_t* url)
        {
            self->_set_url(self, url);
        }
        
        // GetMethod
        
        public static cef_string_userfree* get_method(cef_request_t* self)
        {
            return self->_get_method(self);
        }
        
        // SetMethod
        
        public static void set_method(cef_request_t* self, cef_string_t* method)
        {
            self->_set_method(self, method);
        }
        
        // SetReferrer
        
        public static void set_referrer(cef_request_t* self, cef_string_t* referrer_url, CefReferrerPolicy policy)
        {
            self->_set_referrer(self, referrer_url, policy);
        }
        
        // GetReferrerURL
        
        public static cef_string_userfree* get_referrer_url(cef_request_t* self)
        {
            return self->_get_referrer_url(self);
        }
        
        // GetReferrerPolicy
        
        public static CefReferrerPolicy get_referrer_policy(cef_request_t* self)
        {
            return self->_get_referrer_policy(self);
        }
        
        // GetPostData
        
        public static cef_post_data_t* get_post_data(cef_request_t* self)
        {
            return self->_get_post_data(self);
        }
        
        // SetPostData
        
        public static void set_post_data(cef_request_t* self, cef_post_data_t* postData)
        {
            self->_set_post_data(self, postData);
        }
        
        // GetHeaderMap
        
        public static void get_header_map(cef_request_t* self, cef_string_multimap* headerMap)
        {
            self->_get_header_map(self, headerMap);
        }
        
        // SetHeaderMap
        
        public static void set_header_map(cef_request_t* self, cef_string_multimap* headerMap)
        {
            self->_set_header_map(self, headerMap);
        }
        
        // GetHeaderByName
        
        public static cef_string_userfree* get_header_by_name(cef_request_t* self, cef_string_t* name)
        {
            return self->_get_header_by_name(self, name);
        }
        
        // SetHeaderByName
        
        public static void set_header_by_name(cef_request_t* self, cef_string_t* name, cef_string_t* value, int overwrite)
        {
            self->_set_header_by_name(self, name, value, overwrite);
        }
        
        // Set
        
        public static void set(cef_request_t* self, cef_string_t* url, cef_string_t* method, cef_post_data_t* postData, cef_string_multimap* headerMap)
        {
            self->_set(self, url, method, postData, headerMap);
        }
        
        // GetFlags
        
        public static int get_flags(cef_request_t* self)
        {
            return self->_get_flags(self);
        }
        
        // SetFlags
        
        public static void set_flags(cef_request_t* self, int flags)
        {
            self->_set_flags(self, flags);
        }
        
        // GetFirstPartyForCookies
        
        public static cef_string_userfree* get_first_party_for_cookies(cef_request_t* self)
        {
            return self->_get_first_party_for_cookies(self);
        }
        
        // SetFirstPartyForCookies
        
        public static void set_first_party_for_cookies(cef_request_t* self, cef_string_t* url)
        {
            self->_set_first_party_for_cookies(self, url);
        }
        
        // GetResourceType
        
        public static CefResourceType get_resource_type(cef_request_t* self)
        {
            return self->_get_resource_type(self);
        }
        
        // GetTransitionType
        
        public static CefTransitionType get_transition_type(cef_request_t* self)
        {
            return self->_get_transition_type(self);
        }
        
        // GetIdentifier
        
        public static ulong get_identifier(cef_request_t* self)
        {
            return self->_get_identifier(self);
        }
        
    }
}
