//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Xilium.CefGlue.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_command_line_t
    {
        internal cef_base_ref_counted_t _base;
        internal delegate* unmanaged<cef_command_line_t*, int> _is_valid;
        internal delegate* unmanaged<cef_command_line_t*, int> _is_read_only;
        internal delegate* unmanaged<cef_command_line_t*, cef_command_line_t*> _copy;
        internal delegate* unmanaged<cef_command_line_t*, int, byte**, void> _init_from_argv;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, void> _init_from_string;
        internal delegate* unmanaged<cef_command_line_t*, void> _reset;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_list*, void> _get_argv;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_userfree*> _get_command_line_string;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_userfree*> _get_program;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, void> _set_program;
        internal delegate* unmanaged<cef_command_line_t*, int> _has_switches;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, int> _has_switch;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, cef_string_userfree*> _get_switch_value;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_map*, void> _get_switches;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, void> _append_switch;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, cef_string_t*, void> _append_switch_with_value;
        internal delegate* unmanaged<cef_command_line_t*, int> _has_arguments;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_list*, void> _get_arguments;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, void> _append_argument;
        internal delegate* unmanaged<cef_command_line_t*, cef_string_t*, void> _prepend_wrapper;
        
        // CreateCommandLine
        [DllImport(libcef.DllName, EntryPoint = "cef_command_line_create", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_command_line_t* create();
        
        // GetGlobalCommandLine
        [DllImport(libcef.DllName, EntryPoint = "cef_command_line_get_global", CallingConvention = libcef.CEF_CALL)]
        public static extern cef_command_line_t* get_global();
        
        // AddRef
        
        public static void add_ref(cef_command_line_t* self)
        {
            self->_base._add_ref((cef_base_ref_counted_t*)self);
        }
        
        // Release
        
        public static int release(cef_command_line_t* self)
        {
            return self->_base._release((cef_base_ref_counted_t*)self);
        }
        
        // HasOneRef
        
        public static int has_one_ref(cef_command_line_t* self)
        {
            return self->_base._has_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // HasAtLeastOneRef
        
        public static int has_at_least_one_ref(cef_command_line_t* self)
        {
            return self->_base._has_at_least_one_ref((cef_base_ref_counted_t*)self);
        }
        
        // IsValid
        
        public static int is_valid(cef_command_line_t* self)
        {
            return self->_is_valid(self);
        }
        
        // IsReadOnly
        
        public static int is_read_only(cef_command_line_t* self)
        {
            return self->_is_read_only(self);
        }
        
        // Copy
        
        public static cef_command_line_t* copy(cef_command_line_t* self)
        {
            return self->_copy(self);
        }
        
        // InitFromArgv
        
        public static void init_from_argv(cef_command_line_t* self, int argc, byte** argv)
        {
            self->_init_from_argv(self, argc, argv);
        }
        
        // InitFromString
        
        public static void init_from_string(cef_command_line_t* self, cef_string_t* command_line)
        {
            self->_init_from_string(self, command_line);
        }
        
        // Reset
        
        public static void reset(cef_command_line_t* self)
        {
            self->_reset(self);
        }
        
        // GetArgv
        
        public static void get_argv(cef_command_line_t* self, cef_string_list* argv)
        {
            self->_get_argv(self, argv);
        }
        
        // GetCommandLineString
        
        public static cef_string_userfree* get_command_line_string(cef_command_line_t* self)
        {
            return self->_get_command_line_string(self);
        }
        
        // GetProgram
        
        public static cef_string_userfree* get_program(cef_command_line_t* self)
        {
            return self->_get_program(self);
        }
        
        // SetProgram
        
        public static void set_program(cef_command_line_t* self, cef_string_t* program)
        {
            self->_set_program(self, program);
        }
        
        // HasSwitches
        
        public static int has_switches(cef_command_line_t* self)
        {
            return self->_has_switches(self);
        }
        
        // HasSwitch
        
        public static int has_switch(cef_command_line_t* self, cef_string_t* name)
        {
            return self->_has_switch(self, name);
        }
        
        // GetSwitchValue
        
        public static cef_string_userfree* get_switch_value(cef_command_line_t* self, cef_string_t* name)
        {
            return self->_get_switch_value(self, name);
        }
        
        // GetSwitches
        
        public static void get_switches(cef_command_line_t* self, cef_string_map* switches)
        {
            self->_get_switches(self, switches);
        }
        
        // AppendSwitch
        
        public static void append_switch(cef_command_line_t* self, cef_string_t* name)
        {
            self->_append_switch(self, name);
        }
        
        // AppendSwitchWithValue
        
        public static void append_switch_with_value(cef_command_line_t* self, cef_string_t* name, cef_string_t* value)
        {
            self->_append_switch_with_value(self, name, value);
        }
        
        // HasArguments
        
        public static int has_arguments(cef_command_line_t* self)
        {
            return self->_has_arguments(self);
        }
        
        // GetArguments
        
        public static void get_arguments(cef_command_line_t* self, cef_string_list* arguments)
        {
            self->_get_arguments(self, arguments);
        }
        
        // AppendArgument
        
        public static void append_argument(cef_command_line_t* self, cef_string_t* argument)
        {
            self->_append_argument(self, argument);
        }
        
        // PrependWrapper
        
        public static void prepend_wrapper(cef_command_line_t* self, cef_string_t* wrapper)
        {
            self->_prepend_wrapper(self, wrapper);
        }
        
    }
}
